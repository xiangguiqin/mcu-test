<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\FT32F030xx.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\FT32F030xx.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Jun 13 18:12:26 2023
<BR><P>
<H3>Maximum Stack Usage =        848 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
GsvMain_thread_entry &rArr; AvApiUpdate &rArr; AvFsmFunPlugTxFsm &rArr; KfunCecUpdateFromEdid &rArr; AvHandleEvent &rArr; AvEdidPortManage &rArr; KfunTxReadEdid &rArr; AvUapiTxReadEdid &rArr; AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[9d]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[17]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[ee]">KfunFindVideoNextTxEnd</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ee]">KfunFindVideoNextTxEnd</a><BR>
 <LI><a href="#[11e]">KfunFindAudioNextTxEnd</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11e]">KfunFindAudioNextTxEnd</a><BR>
 <LI><a href="#[183]">KfunFindVideoNextNode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[183]">KfunFindVideoNextNode</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[17]">ADC1_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[2d]">BspGetKey</a> from bsp.o(i.BspGetKey) referenced from av_main.o(i.GsvMain_thread_entry)
 <LI><a href="#[2e]">BspGetMilliSecond</a> from bsp.o(i.BspGetMilliSecond) referenced from av_main.o(i.GsvMain_thread_entry)
 <LI><a href="#[32]">BspI2cRead</a> from bsp.o(i.BspI2cRead) referenced from av_main.o(i.GsvMain_thread_entry)
 <LI><a href="#[31]">BspI2cWrite</a> from bsp.o(i.BspI2cWrite) referenced from av_main.o(i.GsvMain_thread_entry)
 <LI><a href="#[2c]">BspIrdaGetByte</a> from bsp.o(i.BspIrdaGetByte) referenced from av_main.o(i.GsvMain_thread_entry)
 <LI><a href="#[2f]">BspUartGetByte</a> from bsp.o(i.BspUartGetByte) referenced from av_main.o(i.GsvMain_thread_entry)
 <LI><a href="#[30]">BspUartSendByte</a> from bsp.o(i.BspUartSendByte) referenced from av_main.o(i.GsvMain_thread_entry)
 <LI><a href="#[14]">DMA1_Channel1_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[15]">DMA1_Channel2_3_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[16]">DMA1_Channel4_5_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[11]">EXTI0_1_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[12]">EXTI2_3_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[13]">EXTI4_15_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[38]">GsvMain_thread_entry</a> from av_main.o(i.GsvMain_thread_entry) referenced from main.o(i.main)
 <LI><a href="#[8]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[20]">I2C1_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[21]">I2C2_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[33]">ListenToIrdaCommand</a> from av_irda_cmd.o(i.ListenToIrdaCommand) referenced from av_main.o(i.GsvMain_thread_entry)
 <LI><a href="#[35]">ListenToKeyCommand</a> from av_key_cmd.o(i.ListenToKeyCommand) referenced from av_main.o(i.GsvMain_thread_entry)
 <LI><a href="#[34]">ListenToUartCommand</a> from av_uart_cmd.o(i.ListenToUartCommand) referenced from av_main.o(i.GsvMain_thread_entry)
 <LI><a href="#[7]">NMI_Handler</a> from ft32f0xx_it.o(i.NMI_Handler) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[d]">PVD_VDDIO_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[e]">RTC_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[6]">Reset_Handler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[22]">SPI1_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[23]">SPI2_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from ft32f0xx_it.o(i.SVC_Handler) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from board.o(i.SysTick_Handler) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_ft32f0xx.o(i.SystemInit) referenced from startup_ft32f030x8.o(.text)
 <LI><a href="#[1c]">TIM14_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[1d]">TIM15_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[1e]">TIM16_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[1f]">TIM17_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[18]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[19]">TIM1_CC_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[1a]">TIM3_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[1b]">TIM6_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[24]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[25]">USART2_IRQHandler</a> from fpga2mcu_uart.o(i.USART2_IRQHandler) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[26]">USB_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[c]">WWDG_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[42]">__main</a> from __main.o(!!!main) referenced from startup_ft32f030x8.o(.text)
 <LI><a href="#[2b]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[3c]">_printf_fp_dec_real</a> from _printf_fp_dec.o(.text) referenced from printf1.o(x$fpl$printf1)
 <LI><a href="#[3d]">_printf_fp_hex_real</a> from _printf_fp_hex.o(.text) referenced from printf2.o(x$fpl$printf2)
 <LI><a href="#[2a]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[29]">_sputc</a> from _sputc.o(.text) referenced from vsprintf.o(.text)
 <LI><a href="#[3a]">main_thread_entry</a> from components.o(i.main_thread_entry) referenced from components.o(i.rt_application_init)
 <LI><a href="#[36]">rt_thread_exit</a> from thread.o(i.rt_thread_exit) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[3b]">rt_thread_idle_entry</a> from idle.o(i.rt_thread_idle_entry) referenced from idle.o(i.rt_thread_idle_init)
 <LI><a href="#[37]">rt_thread_timeout</a> from thread.o(i.rt_thread_timeout) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[40]">rti_board_end</a> from components.o(i.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[3f]">rti_board_start</a> from components.o(i.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[41]">rti_end</a> from components.o(i.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[3e]">rti_start</a> from components.o(i.rti_start) referenced from components.o(.rti_fn.0)
 <LI><a href="#[39]">test_thread_entry</a> from main.o(i.test_thread_entry) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[42]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[43]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[45]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[22b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[22c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[22d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[8e]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[46]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_n &rArr; _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[47]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[49]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[4b]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[4d]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[4e]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>

<P><STRONG><a name="[4f]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[51]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
</UL>

<P><STRONG><a name="[52]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[54]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[55]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[56]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[58]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_lld &rArr; _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[5a]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[5c]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>

<P><STRONG><a name="[5d]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
</UL>

<P><STRONG><a name="[5e]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[60]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[62]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
</UL>

<P><STRONG><a name="[63]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[65]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[67]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[69]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[73]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[22e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[22f]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[6b]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[230]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[231]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[232]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[233]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[6d]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[234]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[235]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[6e]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[236]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[237]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[238]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[239]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[23a]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[23b]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[23c]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[23d]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[23e]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[23f]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[240]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[241]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[242]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[78]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[243]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[244]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[245]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[246]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[247]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[248]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[249]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[24a]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[44]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[24b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[70]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[72]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[24c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[74]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[24d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[a4]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[77]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[24e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[79]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[24f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PVD_VDDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_ft32f030x8.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1c3]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
</UL>

<P><STRONG><a name="[1c4]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
</UL>

<P><STRONG><a name="[20c]"></a>rt_hw_context_switch</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[20d]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[215]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[250]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[251]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResolutionSwitch
</UL>

<P><STRONG><a name="[252]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetStatus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetStatus
</UL>

<P><STRONG><a name="[254]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncVesaProcess
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabVsdbHf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabVsdbHdmi
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabAudioRead
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeaProcess
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetVideoTiming
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11_TxSetAudioInterface
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11RxManualEQUpdate
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[255]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[82]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[83]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[84]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[80]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[53]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[48]"></a>_printf_charcount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[7d]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>

<P><STRONG><a name="[29]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vsprintf.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[5b]"></a>_printf_longlong_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[8b]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[57]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[5f]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[8c]"></a>_printf_longlong_hex</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[59]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[61]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[4a]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[87]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[8a]"></a>_ll_udiv10</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[86]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[25a]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(x$fpl$printf1)
</UL>
<P><STRONG><a name="[3d]"></a>_printf_fp_hex_real</STRONG> (Thumb, 718 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf2.o(x$fpl$printf2)
</UL>
<P><STRONG><a name="[97]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[64]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[66]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[99]"></a>_printf_lcs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[68]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[6a]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[89]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[85]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[71]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[9b]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[6c]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[95]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[90]"></a>_btod_etento</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[91]"></a>_btod_d2e</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[93]"></a>_btod_emul</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a0]"></a>_btod_emuld</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[92]"></a>_btod_ediv</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _btod_ediv &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a2]"></a>_btod_edivd</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>

<P><STRONG><a name="[76]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[25b]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[25c]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[25d]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[17d]"></a>AvApiAddDevice</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, kapi.o(i.AvApiAddDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AvApiAddDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsvMain_thread_entry
</UL>

<P><STRONG><a name="[a6]"></a>AvApiAddPort</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, kapi.o(i.AvApiAddPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = AvApiAddPort &rArr; AvApiPortMemAllocate &rArr; AvUapiAllocateMemory &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiPortMemAllocate
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsvMain_thread_entry
</UL>

<P><STRONG><a name="[a8]"></a>AvApiConnectPort</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, kapi.o(i.AvApiConnectPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = AvApiConnectPort &rArr; AvHandleEvent &rArr; AvEdidPortManage &rArr; KfunTxReadEdid &rArr; AvUapiTxReadEdid &rArr; AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiConnectPort
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearVideoFromPort
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAudioFromPort
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHandleEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsvMain_thread_entry
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvPortSetRouting
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvPortConnectUpdate
</UL>

<P><STRONG><a name="[ae]"></a>AvApiInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, kapi.o(i.AvApiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AvApiInit
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsvMain_thread_entry
</UL>

<P><STRONG><a name="[b0]"></a>AvApiInitDevice</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, kapi.o(i.AvApiInitDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = AvApiInitDevice &rArr; AvUapiInitDevice &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiInitDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsvMain_thread_entry
</UL>

<P><STRONG><a name="[b2]"></a>AvApiInitFsm</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, kapi.o(i.AvApiInitFsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AvApiInitFsm &rArr; AvFsmEnterFunPlugTxFsm &rArr; KfunPtPortInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmEnterFunReceiverFsm
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmEnterFunPlugTxFsm
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmEnterFunPlugRxFsm
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiPortStart
</UL>

<P><STRONG><a name="[a7]"></a>AvApiPortMemAllocate</STRONG> (Thumb, 876 bytes, Stack size 8 bytes, kapi.o(i.AvApiPortMemAllocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = AvApiPortMemAllocate &rArr; AvUapiAllocateMemory &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiAllocateMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiAddPort
</UL>

<P><STRONG><a name="[b7]"></a>AvApiPortStart</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, kapi.o(i.AvApiPortStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AvApiPortStart &rArr; AvApiInitFsm &rArr; AvFsmEnterFunPlugTxFsm &rArr; KfunPtPortInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiInitFsm
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsvMain_thread_entry
</UL>

<P><STRONG><a name="[b8]"></a>AvApiUpdate</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, kapi.o(i.AvApiUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = AvApiUpdate &rArr; AvFsmFunPlugTxFsm &rArr; KfunCecUpdateFromEdid &rArr; AvHandleEvent &rArr; AvEdidPortManage &rArr; KfunTxReadEdid &rArr; AvUapiTxReadEdid &rArr; AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReceiverFsm
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPlugTxFsm
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPlugRxFsm
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHdcpFsm
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunSimpleHdcpSync
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunSimpleHdcpManage
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckVideoScaler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckVideoGen
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckVideoColor
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckRxState
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckPtState
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckPrState
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckLogicVideoTx
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckLogicVideoRx
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckLogicAudioTx
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckLogicAudioRx
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunReceiverFsm
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugTxFsm
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugRxFsm
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsvMain_thread_entry
</UL>

<P><STRONG><a name="[cc]"></a>AvEdidFunFullAnalysis</STRONG> (Thumb, 588 bytes, Stack size 40 bytes, av_edid_manage.o(i.AvEdidFunFullAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AvEdidFunFullAnalysis &rArr; AvEdidFuncCeabAudioRead &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncFindCeabTag
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabY420VdbRead
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabY420CmdbRead
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabVsvdbRead
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabVsdbHfRead
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabVsdbHdmiRead
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabVcdbRead
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabHdrStRead
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabCdbRead
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabAudioRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidPortAnalysis
</UL>

<P><STRONG><a name="[dc]"></a>AvEdidFuncBlockPermit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, av_edid_manage.o(i.AvEdidFuncBlockPermit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AvEdidFuncBlockPermit
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeaProcess
</UL>

<P><STRONG><a name="[e5]"></a>AvEdidFuncBulkAddValue</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, av_edid_manage.o(i.AvEdidFuncBulkAddValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AvEdidFuncBulkAddValue
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabSVD
</UL>

<P><STRONG><a name="[e4]"></a>AvEdidFuncBulkWriteData</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, av_edid_manage.o(i.AvEdidFuncBulkWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AvEdidFuncBulkWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncDtdWrite
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabDolbyVisionSt
</UL>

<P><STRONG><a name="[d7]"></a>AvEdidFuncCeaProcess</STRONG> (Thumb, 1890 bytes, Stack size 96 bytes, av_edid_manage.o(i.AvEdidFuncCeaProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = AvEdidFuncCeaProcess &rArr; AvEdidFuncCeabAudio &rArr; AvEdidFuncCeabAudioRead &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncFindCeabTag
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncDtdWrite
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabY420Vdb
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabY420Cmdb
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabVsdbHf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabVsdbHdmi
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabVcdb
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabSVD
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabHdrSt
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabDolbyVisionSt
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabCdb
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabAudio
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncBlockPermit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidPortManage
</UL>

<P><STRONG><a name="[d9]"></a>AvEdidFuncCeabAudio</STRONG> (Thumb, 542 bytes, Stack size 64 bytes, av_edid_manage.o(i.AvEdidFuncCeabAudio))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = AvEdidFuncCeabAudio &rArr; AvEdidFuncCeabAudioRead &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabAudioRead
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeaProcess
</UL>

<P><STRONG><a name="[ce]"></a>AvEdidFuncCeabAudioRead</STRONG> (Thumb, 396 bytes, Stack size 96 bytes, av_edid_manage.o(i.AvEdidFuncCeabAudioRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AvEdidFuncCeabAudioRead &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabAudio
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFunFullAnalysis
</UL>

<P><STRONG><a name="[de]"></a>AvEdidFuncCeabCdb</STRONG> (Thumb, 300 bytes, Stack size 44 bytes, av_edid_manage.o(i.AvEdidFuncCeabCdb))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AvEdidFuncCeabCdb &rArr; AvEdidFuncCeabCdbRead
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabCdbRead
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeaProcess
</UL>

<P><STRONG><a name="[d4]"></a>AvEdidFuncCeabCdbRead</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, av_edid_manage.o(i.AvEdidFuncCeabCdbRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AvEdidFuncCeabCdbRead
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabCdb
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFunFullAnalysis
</UL>

<P><STRONG><a name="[e2]"></a>AvEdidFuncCeabDolbyVisionSt</STRONG> (Thumb, 198 bytes, Stack size 60 bytes, av_edid_manage.o(i.AvEdidFuncCeabDolbyVisionSt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AvEdidFuncCeabDolbyVisionSt &rArr; AvEdidFuncBulkWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabVsvdbRead
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncBulkWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeaProcess
</UL>

<P><STRONG><a name="[df]"></a>AvEdidFuncCeabHdrSt</STRONG> (Thumb, 202 bytes, Stack size 44 bytes, av_edid_manage.o(i.AvEdidFuncCeabHdrSt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AvEdidFuncCeabHdrSt &rArr; AvEdidFuncCeabHdrStRead
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabHdrStRead
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeaProcess
</UL>

<P><STRONG><a name="[d2]"></a>AvEdidFuncCeabHdrStRead</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, av_edid_manage.o(i.AvEdidFuncCeabHdrStRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AvEdidFuncCeabHdrStRead
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabHdrSt
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFunFullAnalysis
</UL>

<P><STRONG><a name="[d8]"></a>AvEdidFuncCeabSVD</STRONG> (Thumb, 574 bytes, Stack size 76 bytes, av_edid_manage.o(i.AvEdidFuncCeabSVD))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = AvEdidFuncCeabSVD &rArr; AvEdidFuncBulkAddValue
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncBulkAddValue
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeaProcess
</UL>

<P><STRONG><a name="[dd]"></a>AvEdidFuncCeabVcdb</STRONG> (Thumb, 258 bytes, Stack size 44 bytes, av_edid_manage.o(i.AvEdidFuncCeabVcdb))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AvEdidFuncCeabVcdb &rArr; AvEdidFuncCeabVcdbRead
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabVcdbRead
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeaProcess
</UL>

<P><STRONG><a name="[d1]"></a>AvEdidFuncCeabVcdbRead</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, av_edid_manage.o(i.AvEdidFuncCeabVcdbRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AvEdidFuncCeabVcdbRead
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabVcdb
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFunFullAnalysis
</UL>

<P><STRONG><a name="[da]"></a>AvEdidFuncCeabVsdbHdmi</STRONG> (Thumb, 850 bytes, Stack size 56 bytes, av_edid_manage.o(i.AvEdidFuncCeabVsdbHdmi))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AvEdidFuncCeabVsdbHdmi &rArr; AvEdidFuncCeabVsdbHdmiRead
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabVsdbHdmiRead
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeaProcess
</UL>

<P><STRONG><a name="[cf]"></a>AvEdidFuncCeabVsdbHdmiRead</STRONG> (Thumb, 520 bytes, Stack size 20 bytes, av_edid_manage.o(i.AvEdidFuncCeabVsdbHdmiRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AvEdidFuncCeabVsdbHdmiRead
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabVsdbHdmi
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFunFullAnalysis
</UL>

<P><STRONG><a name="[db]"></a>AvEdidFuncCeabVsdbHf</STRONG> (Thumb, 854 bytes, Stack size 48 bytes, av_edid_manage.o(i.AvEdidFuncCeabVsdbHf))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = AvEdidFuncCeabVsdbHf &rArr; AvEdidFuncCeabVsdbHfRead
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabVsdbHfRead
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeaProcess
</UL>

<P><STRONG><a name="[d0]"></a>AvEdidFuncCeabVsdbHfRead</STRONG> (Thumb, 770 bytes, Stack size 20 bytes, av_edid_manage.o(i.AvEdidFuncCeabVsdbHfRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AvEdidFuncCeabVsdbHfRead
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabVsdbHf
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFunFullAnalysis
</UL>

<P><STRONG><a name="[d6]"></a>AvEdidFuncCeabVsvdbRead</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, av_edid_manage.o(i.AvEdidFuncCeabVsvdbRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AvEdidFuncCeabVsvdbRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabDolbyVisionSt
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFunFullAnalysis
</UL>

<P><STRONG><a name="[e0]"></a>AvEdidFuncCeabY420Cmdb</STRONG> (Thumb, 370 bytes, Stack size 64 bytes, av_edid_manage.o(i.AvEdidFuncCeabY420Cmdb))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AvEdidFuncCeabY420Cmdb &rArr; AvEdidFuncCeabY420CmdbRead &rArr; AvEdidFuncFindCeabTag
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncFindCeabTag
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabY420CmdbRead
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeaProcess
</UL>

<P><STRONG><a name="[d5]"></a>AvEdidFuncCeabY420CmdbRead</STRONG> (Thumb, 362 bytes, Stack size 48 bytes, av_edid_manage.o(i.AvEdidFuncCeabY420CmdbRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AvEdidFuncCeabY420CmdbRead &rArr; AvEdidFuncFindCeabTag
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncFindCeabTag
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabY420Vdb
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabY420Cmdb
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFunFullAnalysis
</UL>

<P><STRONG><a name="[e1]"></a>AvEdidFuncCeabY420Vdb</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, av_edid_manage.o(i.AvEdidFuncCeabY420Vdb))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AvEdidFuncCeabY420Vdb &rArr; AvEdidFuncCeabY420CmdbRead &rArr; AvEdidFuncFindCeabTag
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabY420VdbRead
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabY420CmdbRead
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeaProcess
</UL>

<P><STRONG><a name="[d3]"></a>AvEdidFuncCeabY420VdbRead</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, av_edid_manage.o(i.AvEdidFuncCeabY420VdbRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AvEdidFuncCeabY420VdbRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabY420Vdb
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFunFullAnalysis
</UL>

<P><STRONG><a name="[ef]"></a>AvEdidFuncCheckSum</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, av_edid_manage.o(i.AvEdidFuncCheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AvEdidFuncCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidPortManage
</UL>

<P><STRONG><a name="[e3]"></a>AvEdidFuncDtdWrite</STRONG> (Thumb, 428 bytes, Stack size 44 bytes, av_edid_manage.o(i.AvEdidFuncDtdWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AvEdidFuncDtdWrite &rArr; AvEdidFuncBulkWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncBulkWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncVesaProcess
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeaProcess
</UL>

<P><STRONG><a name="[cd]"></a>AvEdidFuncFindCeabTag</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, av_edid_manage.o(i.AvEdidFuncFindCeabTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AvEdidFuncFindCeabTag
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabY420CmdbRead
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeabY420Cmdb
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeaProcess
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFunFullAnalysis
</UL>

<P><STRONG><a name="[e9]"></a>AvEdidFuncStructInit</STRONG> (Thumb, 266 bytes, Stack size 0 bytes, av_edid_manage.o(i.AvEdidFuncStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidPortManage
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidPortAnalysis
</UL>

<P><STRONG><a name="[e6]"></a>AvEdidFuncVesaProcess</STRONG> (Thumb, 2284 bytes, Stack size 64 bytes, av_edid_manage.o(i.AvEdidFuncVesaProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AvEdidFuncVesaProcess &rArr; AvEdidFuncDtdWrite &rArr; AvEdidFuncBulkWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncDtdWrite
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidPortManage
</UL>

<P><STRONG><a name="[e7]"></a>AvEdidPortAnalysis</STRONG> (Thumb, 866 bytes, Stack size 72 bytes, av_event_handler.o(i.AvEdidPortAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = AvEdidPortAnalysis &rArr; KfunTxReadEdid &rArr; AvUapiTxReadEdid &rArr; AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxReadEdid
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncStructInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFunFullAnalysis
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHandleEvent
</UL>

<P><STRONG><a name="[eb]"></a>AvEdidPortManage</STRONG> (Thumb, 502 bytes, Stack size 88 bytes, av_event_handler.o(i.AvEdidPortManage))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = AvEdidPortManage &rArr; KfunTxReadEdid &rArr; AvUapiTxReadEdid &rArr; AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxReadEdid
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxWriteEdid
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunGenerateSourceSpa
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindVideoNextTxEnd
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindCecSPAFromEdid
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvMemset
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvMemcpy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncVesaProcess
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncStructInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCheckSum
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidFuncCeaProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHandleEvent
</UL>

<P><STRONG><a name="[b3]"></a>AvFsmEnterFunPlugRxFsm</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kernel_fsm.o(i.AvFsmEnterFunPlugRxFsm))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiInitFsm
</UL>

<P><STRONG><a name="[b5]"></a>AvFsmEnterFunPlugTxFsm</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, kernel_fsm.o(i.AvFsmEnterFunPlugTxFsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AvFsmEnterFunPlugTxFsm &rArr; KfunPtPortInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunPtPortInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiInitFsm
</UL>

<P><STRONG><a name="[b4]"></a>AvFsmEnterFunReceiverFsm</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, kernel_fsm.o(i.AvFsmEnterFunReceiverFsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AvFsmEnterFunReceiverFsm
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiInitFsm
</UL>

<P><STRONG><a name="[ba]"></a>AvFsmFunPlugRxFsm</STRONG> (Thumb, 602 bytes, Stack size 24 bytes, kernel_fsm.o(i.AvFsmFunPlugRxFsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = AvFsmFunPlugRxFsm &rArr; KfunPrepareEdid &rArr; AvHandleEvent &rArr; AvEdidPortManage &rArr; KfunTxReadEdid &rArr; AvUapiTxReadEdid &rArr; AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunStdiReadStatus
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxRoutingClearEndInfo
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxReadInfo
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunPrepareEdid
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunPrVarInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunPrResetPort
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunPrHpdDown
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunManageHpa
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiUpdate
</UL>

<P><STRONG><a name="[c5]"></a>AvFsmFunPlugTxFsm</STRONG> (Thumb, 872 bytes, Stack size 40 bytes, kernel_fsm.o(i.AvFsmFunPlugTxFsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = AvFsmFunPlugTxFsm &rArr; KfunCecUpdateFromEdid &rArr; AvHandleEvent &rArr; AvEdidPortManage &rArr; KfunTxReadEdid &rArr; AvUapiTxReadEdid &rArr; AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxVideoManage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxUseDefaultEdid
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxUnlockProtection
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxSinkLost
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxSetMuteAv
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxHdcpManage
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxEdidError
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxClearMuteAv
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxAudioManage
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunPtVarInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunPtResetPort
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunPtEnableTxCore
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunPtAntiDither
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCecUpdateFromEdid
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiUpdate
</UL>

<P><STRONG><a name="[bd]"></a>AvFsmFunReceiverFsm</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, kernel_fsm.o(i.AvFsmFunReceiverFsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = AvFsmFunReceiverFsm &rArr; KfunRxVideoManage &rArr; KfunRxtoTxPacketContent &rArr; KfunTxfromRxPacketContent &rArr; AvUapiTxSetPacketContent &rArr; Gsv2k11_TxSendAVInfoFrame &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxVideoManage
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxVarInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxEnableFrun
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxDisableFrun
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxClearFlags
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxAudioManage
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiUpdate
</UL>

<P><STRONG><a name="[1ae]"></a>AvHalGetKey</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hal.o(i.AvHalGetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AvHalGetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
</UL>

<P><STRONG><a name="[13e]"></a>AvHalI2cRdMultiField</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, hal.o(i.AvHalI2cRdMultiField))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AvHalI2cRdMultiField
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxReadEdid
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetVideoPacketStatus
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetPacketContent
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetAudioPacketStatus
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11RxManualEQUpdate
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11CpCscManage
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetVideoLock
</UL>

<P><STRONG><a name="[123]"></a>AvHalI2cReadField32</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, hal.o(i.AvHalI2cReadField32))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AvHalI2cReadField32
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxEnableInfoFrames
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetVideoTiming
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetHdmiAcrInfo
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetHdcpStatus
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetStatus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetStatus
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckLogicVideoRx
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11TxDDCError
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11RpllProtect
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11ManualCpParameter
</UL>

<P><STRONG><a name="[11a]"></a>AvHalI2cReadField8</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, hal.o(i.AvHalI2cReadField8))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AvHalI2cReadField8
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiConnectPort
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxVideoManage
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetAudNValue
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxReadEdid
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxEncryptSink
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxAudioManage
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetVideoTiming
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetVideoPacketStatus
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetPacketType
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetPacketContent
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetHdmiModeSupport
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetHdmiDeepColor
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetHdmiAcrInfo
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetHdcpStatus
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetAvMute
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetAudioInternalMute
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetStatus
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetHdcpStatus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetStatus
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckVideoScaler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckVideoGen
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckVideoColor
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckLogicVideoTx
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckLogicVideoRx
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckLogicAudioTx
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckLogicAudioRx
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11UpdateRxCdrBandWidth
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11TxScdcAction
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11TxDDCError
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11TweakCrystalFreq
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11SetTxHdcpVersion
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11RxManualEQUpdate
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11MpllProtect
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11ManualCpParameter
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11GetRx5VStatus
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11EnableRxHpa
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11DisableRxHpa
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11CpCscManage
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetVideoLock
</UL>

<P><STRONG><a name="[152]"></a>AvHalI2cWrMultiField</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, hal.o(i.AvHalI2cWrMultiField))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AvHalI2cWrMultiField
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxVideoManage
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetPacketContent
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxWriteEdid
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11_TxSetCSC
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11_TxSendAVInfoFrame
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11RxManualEQUpdate
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11CpCscManage
</UL>

<P><STRONG><a name="[121]"></a>AvHalI2cWriteField32</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, hal.o(i.AvHalI2cWriteField32))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AvHalI2cWriteField32
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxEnableInfoFrames
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxDisableCore
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxSetHdcpMode
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckLogicVideoRx
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11_TxSetAudioInterface
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11ManualCpParameter
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxClearHdcpError
</UL>

<P><STRONG><a name="[11d]"></a>AvHalI2cWriteField8</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, hal.o(i.AvHalI2cWriteField8))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AvHalI2cWriteField8
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiInitDevice
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiConnectPort
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxVideoManage
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetVideoTiming
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetPacketContent
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetHdmiModeSupport
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetHdmiDeepColor
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetFeatureSupport
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetBlackMute
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetAvMute
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetAudioPackets
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetAudNValue
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxReadEdid
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxEncryptSink
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxEnableInfoFrames
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxEnableCore
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxDisableCore
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxDecryptSink
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxClearBksvReady
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxAudioManage
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxWriteEdid
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxSetHdcpMode
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxPortInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetPacketType
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetPacketContent
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetHdcpStatus
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetAudioInternalMute
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxEnableInternalEdid
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxClearVideoInterrupt
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxClearHdcpInterrupt
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxClearFlags
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxClearAudioInterrupt
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxAudioManage
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiResetPort
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetStatus
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetHdcpStatus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetStatus
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckVideoScaler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckVideoGen
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckVideoColor
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckLogicVideoTx
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckLogicVideoRx
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckLogicAudioTx
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckLogicAudioRx
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11_TxSetManualPixelRepeat
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11_TxSetCSC
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11_TxSetAudioInterface
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11_TxSetAudChStatSampFreq
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11_TxSendAVInfoFrame
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11UpdateRxCdrBandWidth
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11TxScdcAction
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11TxPllUnlockClear
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11TxDDCError
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11TweakCrystalFreq
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11ToggleTxHpd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11ToggleTmdsOut
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11ToggleDpllFreq
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11SetTxHdcpVersion
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11RxManualEQUpdate
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11RpllProtect
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11ResetTxFifo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11MpllProtect
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11EnableRxHpa
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11DisableRxHpa
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11CpCscManage
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxClearRxidReady
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxClearHdcpError
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxArcEnable
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetVideoLock
</UL>

<P><STRONG><a name="[ab]"></a>AvHandleEvent</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, av_event_handler.o(i.AvHandleEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = AvHandleEvent &rArr; AvEdidPortManage &rArr; KfunTxReadEdid &rArr; AvUapiTxReadEdid &rArr; AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxOutLedOut
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxInLedOut
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxSetHdmiModeSupport
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindVideoRxFront
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidPortManage
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidPortAnalysis
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxUseDefaultEdid
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxSinkLost
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxEdidError
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunPtVarInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunPrepareEdid
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunHdcpVarInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCecUpdateFromEdid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPlugRxFsm
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckPtState
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiConnectPort
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunHdcpDetectSource
</UL>

<P><STRONG><a name="[17c]"></a>AvKapiHookUserFunctions</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, kapi.o(i.AvKapiHookUserFunctions))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AvKapiHookUserFunctions
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsvMain_thread_entry
</UL>

<P><STRONG><a name="[ed]"></a>AvMemcpy</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hal.o(i.AvMemcpy))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxAudioManage
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxReadInfo
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidPortManage
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckVideoScaler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckVideoColor
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckLogicAudioRx
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11_TxSendAVInfoFrame
</UL>

<P><STRONG><a name="[ec]"></a>AvMemset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal.o(i.AvMemset))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxVarInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiConnectPort
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidPortManage
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxReadEdid
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetVideoPacketStatus
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetPacketContent
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetHdcpStatus
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetAudioPacketStatus
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetStatus
</UL>

<P><STRONG><a name="[115]"></a>AvPortConnectUpdate</STRONG> (Thumb, 348 bytes, Stack size 56 bytes, av_event_handler.o(i.AvPortConnectUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = AvPortConnectUpdate &rArr; AvPortSetRouting &rArr; AvApiConnectPort &rArr; AvHandleEvent &rArr; AvEdidPortManage &rArr; KfunTxReadEdid &rArr; AvUapiTxReadEdid &rArr; AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindVideoRxFront
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiConnectPort
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvPortSetRouting
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvPortRoutingPolicy
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvPortRoutingMap
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsvMain_thread_entry
</UL>

<P><STRONG><a name="[117]"></a>AvPortRoutingMap</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, av_event_handler.o(i.AvPortRoutingMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AvPortRoutingMap
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvPortConnectUpdate
</UL>

<P><STRONG><a name="[116]"></a>AvPortRoutingPolicy</STRONG> (Thumb, 946 bytes, Stack size 8 bytes, av_event_handler.o(i.AvPortRoutingPolicy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AvPortRoutingPolicy
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvPortConnectUpdate
</UL>

<P><STRONG><a name="[118]"></a>AvPortSetRouting</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, av_event_handler.o(i.AvPortSetRouting))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = AvPortSetRouting &rArr; AvApiConnectPort &rArr; AvHandleEvent &rArr; AvEdidPortManage &rArr; KfunTxReadEdid &rArr; AvUapiTxReadEdid &rArr; AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiConnectPort
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvPortConnectUpdate
</UL>

<P><STRONG><a name="[b6]"></a>AvUapiAllocateMemory</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, uapi.o(i.AvUapiAllocateMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = AvUapiAllocateMemory &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiPortMemAllocate
</UL>

<P><STRONG><a name="[119]"></a>AvUapiCheckLogicAudioRx</STRONG> (Thumb, 590 bytes, Stack size 40 bytes, gsv2k11.o(i.AvUapiCheckLogicAudioRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = AvUapiCheckLogicAudioRx &rArr; AvUapiTxSetPacketContent &rArr; Gsv2k11_TxSendAVInfoFrame &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvMemcpy
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetPacketContent
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetAudioPackets
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindAudioNextTxEnd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckLogicAudioRx
</UL>

<P><STRONG><a name="[11f]"></a>AvUapiCheckLogicAudioTx</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, gsv2k11.o(i.AvUapiCheckLogicAudioTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AvUapiCheckLogicAudioTx &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckLogicAudioTx
</UL>

<P><STRONG><a name="[120]"></a>AvUapiCheckLogicVideoRx</STRONG> (Thumb, 2530 bytes, Stack size 48 bytes, gsv2k11.o(i.AvUapiCheckLogicVideoRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = AvUapiCheckLogicVideoRx &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField32
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField32
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11RpllProtect
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckLogicVideoRx
</UL>

<P><STRONG><a name="[124]"></a>AvUapiCheckLogicVideoTx</STRONG> (Thumb, 874 bytes, Stack size 32 bytes, gsv2k11.o(i.AvUapiCheckLogicVideoTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = AvUapiCheckLogicVideoTx &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11RpllProtect
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11FindHdmiRxFront
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckLogicVideoTx
</UL>

<P><STRONG><a name="[126]"></a>AvUapiCheckVideoColor</STRONG> (Thumb, 726 bytes, Stack size 40 bytes, gsv2k11.o(i.AvUapiCheckVideoColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AvUapiCheckVideoColor &rArr; Gsv2k11CpCscManage &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvMemcpy
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11ManualCpParameter
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11CpCscManage
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckVideoColor
</UL>

<P><STRONG><a name="[129]"></a>AvUapiCheckVideoGen</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, gsv2k11.o(i.AvUapiCheckVideoGen))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AvUapiCheckVideoGen &rArr; Gsv2k11ToggleDpllFreq &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11ToggleDpllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckVideoGen
</UL>

<P><STRONG><a name="[12b]"></a>AvUapiCheckVideoScaler</STRONG> (Thumb, 1238 bytes, Stack size 64 bytes, gsv2k11.o(i.AvUapiCheckVideoScaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AvUapiCheckVideoScaler &rArr; Gsv2k11CpCscManage &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindVideoNextTxEnd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvMemcpy
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11ManualCpParameter
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11CpCscManage
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckVideoScaler
</UL>

<P><STRONG><a name="[ad]"></a>AvUapiConnectPort</STRONG> (Thumb, 1514 bytes, Stack size 56 bytes, gsv2k11.o(i.AvUapiConnectPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = AvUapiConnectPort &rArr; AvUapiTxDisableCore &rArr; Gsv2k11SetTxHdcpVersion &rArr; Gsv2k11ToggleTxHpd &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvMemset
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxEnableInfoFrames
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxDisableCore
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxArcEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiConnectPort
</UL>

<P><STRONG><a name="[187]"></a>AvUapiHdcp2p2Mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gsv2k11.o(i.AvUapiHdcp2p2Mode))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunHdcpReset
</UL>

<P><STRONG><a name="[12f]"></a>AvUapiHookBspFunctions</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, uapi.o(i.AvUapiHookBspFunctions))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = AvUapiHookBspFunctions &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsvMain_thread_entry
</UL>

<P><STRONG><a name="[af]"></a>AvUapiInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uapi.o(i.AvUapiInit))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiInit
</UL>

<P><STRONG><a name="[b1]"></a>AvUapiInitDevice</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, gsv2k11.o(i.AvUapiInitDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = AvUapiInitDevice &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11MpllProtect
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiInitDevice
</UL>

<P><STRONG><a name="[ea]"></a>AvUapiOuputDbgMsg</STRONG> (Thumb, 66 bytes, Stack size 160 bytes, uapi.o(i.AvUapiOuputDbgMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxVideoManage
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunHdcpReset
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCecUpdateFromEdid
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReceiverFsm
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPlugTxFsm
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPlugRxFsm
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHdcpFsm
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiInitDevice
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiAllocateMemory
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiHookBspFunctions
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindCecSPAFromEdid
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvPortSetRouting
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidPortManage
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidPortAnalysis
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetAvMute
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxReadEdid
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxEncryptSink
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxDecryptSink
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxAudioManage
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxWriteEdid
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxSetHpdUp
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxSetHpdDown
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxSetHdcpMode
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetVideoPacketStatus
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetHdcpStatus
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetAudioPacketStatus
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetAudioInternalMute
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiResetPort
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunUpdatePortFromPacket
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetStatus
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetHdcpStatus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetStatus
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckLogicVideoTx
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckLogicVideoRx
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11_TxSendAVInfoFrame
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11ToggleTxHpd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11ToggleTmdsOut
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11RxManualEQUpdate
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11EnableRxHpa
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11DisableRxHpa
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetSinkHdcpCapability
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxClearHdcpError
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetVideoLock
</UL>

<P><STRONG><a name="[131]"></a>AvUapiResetPort</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, gsv2k11.o(i.AvUapiResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = AvUapiResetPort &rArr; AvUapiTxDisableCore &rArr; Gsv2k11SetTxHdcpVersion &rArr; Gsv2k11ToggleTxHpd &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxEnableCore
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxDisableCore
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11RxManualEQUpdate
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11DisableRxHpa
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunPtResetPort
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunPrResetPort
</UL>

<P><STRONG><a name="[135]"></a>AvUapiRxAudioManage</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, gsv2k11.o(i.AvUapiRxAudioManage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AvUapiRxAudioManage &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxSetAudioInternalMute
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxAudioManage
</UL>

<P><STRONG><a name="[137]"></a>AvUapiRxClearAudioInterrupt</STRONG> (Thumb, 558 bytes, Stack size 24 bytes, gsv2k11.o(i.AvUapiRxClearAudioInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AvUapiRxClearAudioInterrupt &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxAudioManage
</UL>

<P><STRONG><a name="[138]"></a>AvUapiRxClearFlags</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gsv2k11.o(i.AvUapiRxClearFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AvUapiRxClearFlags &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxClearFlags
</UL>

<P><STRONG><a name="[139]"></a>AvUapiRxClearHdcpInterrupt</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, gsv2k11.o(i.AvUapiRxClearHdcpInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AvUapiRxClearHdcpInterrupt &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunHdcpDetectSource
</UL>

<P><STRONG><a name="[13a]"></a>AvUapiRxClearVideoInterrupt</STRONG> (Thumb, 738 bytes, Stack size 24 bytes, gsv2k11.o(i.AvUapiRxClearVideoInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AvUapiRxClearVideoInterrupt &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxVideoManage
</UL>

<P><STRONG><a name="[18d]"></a>AvUapiRxEnableFreeRun</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gsv2k11.o(i.AvUapiRxEnableFreeRun))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxEnableFrun
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxDisableFrun
</UL>

<P><STRONG><a name="[13b]"></a>AvUapiRxEnableInternalEdid</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gsv2k11.o(i.AvUapiRxEnableInternalEdid))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AvUapiRxEnableInternalEdid &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxWriteEdid
</UL>

<P><STRONG><a name="[13c]"></a>AvUapiRxGetAudioInternalMute</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, gsv2k11.o(i.AvUapiRxGetAudioInternalMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = AvUapiRxGetAudioInternalMute &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxAudioManage
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetStatus
</UL>

<P><STRONG><a name="[13d]"></a>AvUapiRxGetAudioPacketStatus</STRONG> (Thumb, 688 bytes, Stack size 64 bytes, gsv2k11.o(i.AvUapiRxGetAudioPacketStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = AvUapiRxGetAudioPacketStatus &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvMemset
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetPacketType
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cRdMultiField
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxAudioManage
</UL>

<P><STRONG><a name="[140]"></a>AvUapiRxGetAvMute</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gsv2k11.o(i.AvUapiRxGetAvMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AvUapiRxGetAvMute &rArr; AvHalI2cReadField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxVideoManage
</UL>

<P><STRONG><a name="[141]"></a>AvUapiRxGetHdcpStatus</STRONG> (Thumb, 880 bytes, Stack size 88 bytes, gsv2k11.o(i.AvUapiRxGetHdcpStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = AvUapiRxGetHdcpStatus &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindVideoNextTxEnd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvMemset
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField32
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunHdcpDetectSource
</UL>

<P><STRONG><a name="[142]"></a>AvUapiRxGetHdmiAcrInfo</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, gsv2k11.o(i.AvUapiRxGetHdmiAcrInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AvUapiRxGetHdmiAcrInfo &rArr; AvHalI2cReadField32
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField32
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxAudioManage
</UL>

<P><STRONG><a name="[143]"></a>AvUapiRxGetHdmiDeepColor</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, gsv2k11.o(i.AvUapiRxGetHdmiDeepColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AvUapiRxGetHdmiDeepColor &rArr; AvHalI2cReadField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxVideoManage
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxVideoManage
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxReadInfo
</UL>

<P><STRONG><a name="[144]"></a>AvUapiRxGetHdmiModeSupport</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gsv2k11.o(i.AvUapiRxGetHdmiModeSupport))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AvUapiRxGetHdmiModeSupport &rArr; AvHalI2cReadField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxVideoManage
</UL>

<P><STRONG><a name="[145]"></a>AvUapiRxGetPacketContent</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, gsv2k11.o(i.AvUapiRxGetPacketContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AvUapiRxGetPacketContent &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvMemset
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cRdMultiField
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxfromRxPacketContent
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxtoTxPacketContent
</UL>

<P><STRONG><a name="[13f]"></a>AvUapiRxGetPacketType</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, gsv2k11.o(i.AvUapiRxGetPacketType))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AvUapiRxGetPacketType &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxAudioManage
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetAudioPacketStatus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetStatus
</UL>

<P><STRONG><a name="[146]"></a>AvUapiRxGetStatus</STRONG> (Thumb, 3106 bytes, Stack size 48 bytes, gsv2k11.o(i.AvUapiRxGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = AvUapiRxGetStatus &rArr; AvUapiRxGetVideoLock &rArr; Gsv2k11RxManualEQUpdate &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetPacketType
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetAudioInternalMute
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField32
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11RxManualEQUpdate
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11GetRx5VStatus
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetVideoLock
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckPrState
</UL>

<P><STRONG><a name="[148]"></a>AvUapiRxGetVideoLock</STRONG> (Thumb, 530 bytes, Stack size 40 bytes, gsv2k11.o(i.AvUapiRxGetVideoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = AvUapiRxGetVideoLock &rArr; Gsv2k11RxManualEQUpdate &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cRdMultiField
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11RxManualEQUpdate
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11RpllProtect
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetStatus
</UL>

<P><STRONG><a name="[14a]"></a>AvUapiRxGetVideoPacketStatus</STRONG> (Thumb, 974 bytes, Stack size 72 bytes, gsv2k11.o(i.AvUapiRxGetVideoPacketStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = AvUapiRxGetVideoPacketStatus &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvMemset
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cRdMultiField
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxVideoManage
</UL>

<P><STRONG><a name="[14b]"></a>AvUapiRxGetVideoTiming</STRONG> (Thumb, 570 bytes, Stack size 32 bytes, gsv2k11.o(i.AvUapiRxGetVideoTiming))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AvUapiRxGetVideoTiming &rArr; AvHalI2cReadField32
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField32
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxVideoManage
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxReadInfo
</UL>

<P><STRONG><a name="[14c]"></a>AvUapiRxPortInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gsv2k11.o(i.AvUapiRxPortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = AvUapiRxPortInit &rArr; Gsv2k11DisableRxHpa &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11DisableRxHpa
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxVarInit
</UL>

<P><STRONG><a name="[18e]"></a>AvUapiRxReadInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uapi.o(i.AvUapiRxReadInfo))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxReadInfo
</UL>

<P><STRONG><a name="[194]"></a>AvUapiRxReadStdi</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uapi.o(i.AvUapiRxReadStdi))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunStdiReadStatus
</UL>

<P><STRONG><a name="[136]"></a>AvUapiRxSetAudioInternalMute</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gsv2k11.o(i.AvUapiRxSetAudioInternalMute))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxAudioManage
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxAudioManage
</UL>

<P><STRONG><a name="[189]"></a>AvUapiRxSetHdcpEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gsv2k11.o(i.AvUapiRxSetHdcpEnable))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunHdcpVarInit
</UL>

<P><STRONG><a name="[14d]"></a>AvUapiRxSetHdcpMode</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, gsv2k11.o(i.AvUapiRxSetHdcpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = AvUapiRxSetHdcpMode &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField32
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunHdcpReset
</UL>

<P><STRONG><a name="[14e]"></a>AvUapiRxSetHpdDown</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gsv2k11.o(i.AvUapiRxSetHpdDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = AvUapiRxSetHpdDown &rArr; Gsv2k11DisableRxHpa &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11DisableRxHpa
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunPrHpdDown
</UL>

<P><STRONG><a name="[14f]"></a>AvUapiRxSetHpdUp</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gsv2k11.o(i.AvUapiRxSetHpdUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = AvUapiRxSetHpdUp &rArr; Gsv2k11EnableRxHpa &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11EnableRxHpa
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunPrHpdUp
</UL>

<P><STRONG><a name="[191]"></a>AvUapiRxSetSpa</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gsv2k11.o(i.AvUapiRxSetSpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AvUapiRxSetSpa
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxWriteEdid
</UL>

<P><STRONG><a name="[190]"></a>AvUapiRxVideoManage</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gsv2k11.o(i.AvUapiRxVideoManage))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxVideoManage
</UL>

<P><STRONG><a name="[151]"></a>AvUapiRxWriteEdid</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, gsv2k11.o(i.AvUapiRxWriteEdid))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = AvUapiRxWriteEdid &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWrMultiField
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxWriteEdid
</UL>

<P><STRONG><a name="[12e]"></a>AvUapiTxArcEnable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gsv2k11.o(i.AvUapiTxArcEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AvUapiTxArcEnable &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiConnectPort
</UL>

<P><STRONG><a name="[153]"></a>AvUapiTxAudioManage</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, gsv2k11.o(i.AvUapiTxAudioManage))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = AvUapiTxAudioManage &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetAudioPackets
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxAudioManage
</UL>

<P><STRONG><a name="[154]"></a>AvUapiTxClearBksvReady</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gsv2k11.o(i.AvUapiTxClearBksvReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AvUapiTxClearBksvReady &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxHdcpManage
</UL>

<P><STRONG><a name="[155]"></a>AvUapiTxClearHdcpError</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, gsv2k11.o(i.AvUapiTxClearHdcpError))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = AvUapiTxClearHdcpError &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField32
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetHdcpStatus
</UL>

<P><STRONG><a name="[156]"></a>AvUapiTxClearRxidReady</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gsv2k11.o(i.AvUapiTxClearRxidReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AvUapiTxClearRxidReady &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxDisableCore
</UL>

<P><STRONG><a name="[157]"></a>AvUapiTxDecryptSink</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, gsv2k11.o(i.AvUapiTxDecryptSink))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = AvUapiTxDecryptSink &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunSimpleHdcpSync
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxDisableCore
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetHdcpStatus
</UL>

<P><STRONG><a name="[12c]"></a>AvUapiTxDisableCore</STRONG> (Thumb, 446 bytes, Stack size 40 bytes, gsv2k11.o(i.AvUapiTxDisableCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = AvUapiTxDisableCore &rArr; Gsv2k11SetTxHdcpVersion &rArr; Gsv2k11ToggleTxHpd &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetHdmiModeSupport
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetFeatureSupport
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxDecryptSink
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField32
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11ToggleTmdsOut
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11SetTxHdcpVersion
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxClearRxidReady
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxUnlockProtection
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiConnectPort
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiResetPort
</UL>

<P><STRONG><a name="[134]"></a>AvUapiTxEnableCore</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gsv2k11.o(i.AvUapiTxEnableCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AvUapiTxEnableCore &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxUnlockProtection
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunPtEnableTxCore
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiResetPort
</UL>

<P><STRONG><a name="[12d]"></a>AvUapiTxEnableInfoFrames</STRONG> (Thumb, 922 bytes, Stack size 56 bytes, gsv2k11.o(i.AvUapiTxEnableInfoFrames))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AvUapiTxEnableInfoFrames &rArr; AvHalI2cReadField32
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField32
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField32
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiConnectPort
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetPacketContent
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetAudioPackets
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxfromRxPacketContent
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11_TxSendAVInfoFrame
</UL>

<P><STRONG><a name="[15c]"></a>AvUapiTxEncryptSink</STRONG> (Thumb, 666 bytes, Stack size 32 bytes, gsv2k11.o(i.AvUapiTxEncryptSink))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = AvUapiTxEncryptSink &rArr; Gsv2k11SetTxHdcpVersion &rArr; Gsv2k11ToggleTxHpd &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetBlackMute
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11SetTxHdcpVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunSimpleHdcpSync
</UL>

<P><STRONG><a name="[15e]"></a>AvUapiTxGetHdcpStatus</STRONG> (Thumb, 1248 bytes, Stack size 56 bytes, gsv2k11.o(i.AvUapiTxGetHdcpStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = AvUapiTxGetHdcpStatus &rArr; Gsv2k11SetTxHdcpVersion &rArr; Gsv2k11ToggleTxHpd &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxDecryptSink
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11ToggleTmdsOut
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11SetTxHdcpVersion
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxClearHdcpError
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckPtState
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunHdcpDetectSink
</UL>

<P><STRONG><a name="[15f]"></a>AvUapiTxGetSinkHdcpCapability</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, gsv2k11.o(i.AvUapiTxGetSinkHdcpCapability))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11TxScdcAction
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxReadEdid
</UL>

<P><STRONG><a name="[161]"></a>AvUapiTxGetStatus</STRONG> (Thumb, 2056 bytes, Stack size 88 bytes, gsv2k11.o(i.AvUapiTxGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = AvUapiTxGetStatus &rArr; Gsv2k11_TxSendAVInfoFrame &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvMemset
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetHdmiModeSupport
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField32
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11_TxSendAVInfoFrame
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11TxScdcAction
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11TxPllUnlockClear
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11TxDDCError
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11TweakCrystalFreq
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11ToggleTxHpd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11ToggleTmdsOut
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11RpllProtect
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11ResetTxFifo
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11FindHdmiRxFront
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckPtState
</UL>

<P><STRONG><a name="[196]"></a>AvUapiTxHdcp2p2Manage</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gsv2k11.o(i.AvUapiTxHdcp2p2Manage))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxHdcpManage
</UL>

<P><STRONG><a name="[18b]"></a>AvUapiTxPortInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gsv2k11.o(i.AvUapiTxPortInit))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunPtPortInit
</UL>

<P><STRONG><a name="[168]"></a>AvUapiTxReadEdid</STRONG> (Thumb, 432 bytes, Stack size 56 bytes, gsv2k11.o(i.AvUapiTxReadEdid))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = AvUapiTxReadEdid &rArr; AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvMemset
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cRdMultiField
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11TxDDCError
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetSinkHdcpCapability
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCecUpdateFromEdid
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxReadEdid
</UL>

<P><STRONG><a name="[169]"></a>AvUapiTxSetAudNValue</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, gsv2k11.o(i.AvUapiTxSetAudNValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AvUapiTxSetAudNValue &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxAudioManage
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetAudioPackets
</UL>

<P><STRONG><a name="[11c]"></a>AvUapiTxSetAudioPackets</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, gsv2k11.o(i.AvUapiTxSetAudioPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AvUapiTxSetAudioPackets &rArr; AvUapiTxEnableInfoFrames &rArr; AvHalI2cReadField32
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetAudNValue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxEnableInfoFrames
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11_TxSetAudioInterface
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11_TxSetAudChStatSampFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxAudioManage
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxAudioManage
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckLogicAudioRx
</UL>

<P><STRONG><a name="[16c]"></a>AvUapiTxSetAvMute</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, gsv2k11.o(i.AvUapiTxSetAvMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = AvUapiTxSetAvMute &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxSetMuteAv
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxClearMuteAv
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxVideoManage
</UL>

<P><STRONG><a name="[15d]"></a>AvUapiTxSetBlackMute</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, gsv2k11.o(i.AvUapiTxSetBlackMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AvUapiTxSetBlackMute &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxSetMuteAv
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxClearMuteAv
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunSimpleHdcpSync
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxEncryptSink
</UL>

<P><STRONG><a name="[15a]"></a>AvUapiTxSetFeatureSupport</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, gsv2k11.o(i.AvUapiTxSetFeatureSupport))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AvUapiTxSetFeatureSupport &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCecUpdateFromEdid
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxDisableCore
</UL>

<P><STRONG><a name="[16d]"></a>AvUapiTxSetHdmiDeepColor</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, gsv2k11.o(i.AvUapiTxSetHdmiDeepColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AvUapiTxSetHdmiDeepColor &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxVideoManage
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxVideoManage
</UL>

<P><STRONG><a name="[15b]"></a>AvUapiTxSetHdmiModeSupport</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, gsv2k11.o(i.AvUapiTxSetHdmiModeSupport))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AvUapiTxSetHdmiModeSupport &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxUseDefaultEdid
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxVideoManage
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCecUpdateFromEdid
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxSetHdmiModeSupport
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxDisableCore
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetStatus
</UL>

<P><STRONG><a name="[11b]"></a>AvUapiTxSetPacketContent</STRONG> (Thumb, 728 bytes, Stack size 40 bytes, gsv2k11.o(i.AvUapiTxSetPacketContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = AvUapiTxSetPacketContent &rArr; Gsv2k11_TxSendAVInfoFrame &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxEnableInfoFrames
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWrMultiField
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11_TxSetAudChStatSampFreq
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11_TxSendAVInfoFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxVideoManage
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxVideoManage
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxfromRxPacketContent
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckLogicAudioRx
</UL>

<P><STRONG><a name="[16e]"></a>AvUapiTxSetVideoTiming</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, gsv2k11.o(i.AvUapiTxSetVideoTiming))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AvUapiTxSetVideoTiming &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindVideoRxFront
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxReadInfo
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunPtEnableTxCore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11_TxSendAVInfoFrame
</UL>

<P><STRONG><a name="[16f]"></a>AvUapiTxVideoManage</STRONG> (Thumb, 430 bytes, Stack size 32 bytes, gsv2k11.o(i.AvUapiTxVideoManage))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AvUapiTxVideoManage &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWrMultiField
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxVideoManage
</UL>

<P><STRONG><a name="[2d]"></a>BspGetKey</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, bsp.o(i.BspGetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BspGetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> av_main.o(i.GsvMain_thread_entry)
</UL>
<P><STRONG><a name="[2e]"></a>BspGetMilliSecond</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, bsp.o(i.BspGetMilliSecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BspGetMilliSecond
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> av_main.o(i.GsvMain_thread_entry)
</UL>
<P><STRONG><a name="[32]"></a>BspI2cRead</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, bsp.o(i.BspI2cRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BspI2cRead &rArr; ManI2cRead &rArr; ManI2cSendByte &rArr; ManGetAck
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> av_main.o(i.GsvMain_thread_entry)
</UL>
<P><STRONG><a name="[31]"></a>BspI2cWrite</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, bsp.o(i.BspI2cWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BspI2cWrite &rArr; ManI2cWrite &rArr; ManI2cSendByte &rArr; ManGetAck
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> av_main.o(i.GsvMain_thread_entry)
</UL>
<P><STRONG><a name="[17b]"></a>BspInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(i.BspInit))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsvMain_thread_entry
</UL>

<P><STRONG><a name="[2c]"></a>BspIrdaGetByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp.o(i.BspIrdaGetByte))
<BR>[Address Reference Count : 1]<UL><LI> av_main.o(i.GsvMain_thread_entry)
</UL>
<P><STRONG><a name="[2f]"></a>BspUartGetByte</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, bsp.o(i.BspUartGetByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BspUartGetByte
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> av_main.o(i.GsvMain_thread_entry)
</UL>
<P><STRONG><a name="[30]"></a>BspUartSendByte</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bsp.o(i.BspUartSendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BspUartSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> av_main.o(i.GsvMain_thread_entry)
</UL>
<P><STRONG><a name="[ac]"></a>ClearAudioFromPort</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, kapi.o(i.ClearAudioFromPort))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiConnectPort
</UL>

<P><STRONG><a name="[aa]"></a>ClearVideoFromPort</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, kapi.o(i.ClearVideoFromPort))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiConnectPort
</UL>

<P><STRONG><a name="[19c]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, ft32f0xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eSoft_I2C_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpga2mcu_uart_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_uart_init
</UL>

<P><STRONG><a name="[1dc]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, ft32f0xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpga2mcu_uart_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_uart_init
</UL>

<P><STRONG><a name="[170]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ft32f0xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSoft_I2C_Wait_Ack
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSoft_I2C_Read_Byte
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspGetKey
</UL>

<P><STRONG><a name="[1e2]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ft32f0xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[19b]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ft32f0xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[198]"></a>GPIO_WriteBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ft32f0xx_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoft_I2C_Stop
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoft_I2C_Start
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoft_I2C_Send_Byte
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoft_I2C_NAck
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoft_I2C_Ack
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSoft_I2C_Wait_Ack
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSoft_I2C_Read_Byte
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eSoft_I2C_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicLedOut
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxOutLedOut
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxInLedOut
</UL>

<P><STRONG><a name="[1a2]"></a>GetSdaValue</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, bsp.o(i.GetSdaValue))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cReadByte
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManGetAck
</UL>

<P><STRONG><a name="[176]"></a>Gsv2k11ColorCsMapping</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gsv2k11.o(i.Gsv2k11ColorCsMapping))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11_TxSetCSC
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11CpCscManage
</UL>

<P><STRONG><a name="[127]"></a>Gsv2k11CpCscManage</STRONG> (Thumb, 400 bytes, Stack size 88 bytes, gsv2k11.o(i.Gsv2k11CpCscManage))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Gsv2k11CpCscManage &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWrMultiField
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cRdMultiField
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11ColorCsMapping
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckVideoScaler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckVideoColor
</UL>

<P><STRONG><a name="[132]"></a>Gsv2k11DisableRxHpa</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, gsv2k11.o(i.Gsv2k11DisableRxHpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = Gsv2k11DisableRxHpa &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxSetHpdDown
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxPortInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiResetPort
</UL>

<P><STRONG><a name="[150]"></a>Gsv2k11EnableRxHpa</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, gsv2k11.o(i.Gsv2k11EnableRxHpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = Gsv2k11EnableRxHpa &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxSetHpdUp
</UL>

<P><STRONG><a name="[125]"></a>Gsv2k11FindHdmiRxFront</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gsv2k11.o(i.Gsv2k11FindHdmiRxFront))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetStatus
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckLogicVideoTx
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11_TxSendAVInfoFrame
</UL>

<P><STRONG><a name="[147]"></a>Gsv2k11GetRx5VStatus</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gsv2k11.o(i.Gsv2k11GetRx5VStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Gsv2k11GetRx5VStatus &rArr; AvHalI2cReadField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetStatus
</UL>

<P><STRONG><a name="[128]"></a>Gsv2k11ManualCpParameter</STRONG> (Thumb, 1624 bytes, Stack size 48 bytes, gsv2k11.o(i.Gsv2k11ManualCpParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Gsv2k11ManualCpParameter &rArr; AvHalI2cReadField32
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField32
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField32
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckVideoScaler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckVideoColor
</UL>

<P><STRONG><a name="[130]"></a>Gsv2k11MpllProtect</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, gsv2k11.o(i.Gsv2k11MpllProtect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Gsv2k11MpllProtect &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiInitDevice
</UL>

<P><STRONG><a name="[164]"></a>Gsv2k11ResetTxFifo</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, gsv2k11.o(i.Gsv2k11ResetTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Gsv2k11ResetTxFifo &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetStatus
</UL>

<P><STRONG><a name="[122]"></a>Gsv2k11RpllProtect</STRONG> (Thumb, 510 bytes, Stack size 40 bytes, gsv2k11.o(i.Gsv2k11RpllProtect))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Gsv2k11RpllProtect &rArr; AvHalI2cReadField32
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField32
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetStatus
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckLogicVideoTx
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckLogicVideoRx
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetVideoLock
</UL>

<P><STRONG><a name="[133]"></a>Gsv2k11RxManualEQUpdate</STRONG> (Thumb, 1456 bytes, Stack size 88 bytes, gsv2k11.o(i.Gsv2k11RxManualEQUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = Gsv2k11RxManualEQUpdate &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWrMultiField
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cRdMultiField
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11UpdateRxCdrBandWidth
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiResetPort
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetStatus
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetVideoLock
</UL>

<P><STRONG><a name="[158]"></a>Gsv2k11SetTxHdcpVersion</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, gsv2k11.o(i.Gsv2k11SetTxHdcpVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = Gsv2k11SetTxHdcpVersion &rArr; Gsv2k11ToggleTxHpd &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11ToggleTxHpd
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxEncryptSink
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxDisableCore
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetHdcpStatus
</UL>

<P><STRONG><a name="[12a]"></a>Gsv2k11ToggleDpllFreq</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, gsv2k11.o(i.Gsv2k11ToggleDpllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Gsv2k11ToggleDpllFreq &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckVideoGen
</UL>

<P><STRONG><a name="[159]"></a>Gsv2k11ToggleTmdsOut</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, gsv2k11.o(i.Gsv2k11ToggleTmdsOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = Gsv2k11ToggleTmdsOut &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxDisableCore
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetStatus
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetHdcpStatus
</UL>

<P><STRONG><a name="[167]"></a>Gsv2k11ToggleTxHpd</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, gsv2k11.o(i.Gsv2k11ToggleTxHpd))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = Gsv2k11ToggleTxHpd &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetStatus
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11SetTxHdcpVersion
</UL>

<P><STRONG><a name="[163]"></a>Gsv2k11TweakCrystalFreq</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, gsv2k11.o(i.Gsv2k11TweakCrystalFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Gsv2k11TweakCrystalFreq &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetStatus
</UL>

<P><STRONG><a name="[166]"></a>Gsv2k11TxDDCError</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, gsv2k11.o(i.Gsv2k11TxDDCError))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Gsv2k11TxDDCError &rArr; AvHalI2cReadField32
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField32
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxReadEdid
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetStatus
</UL>

<P><STRONG><a name="[162]"></a>Gsv2k11TxPllUnlockClear</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gsv2k11.o(i.Gsv2k11TxPllUnlockClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Gsv2k11TxPllUnlockClear &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetStatus
</UL>

<P><STRONG><a name="[160]"></a>Gsv2k11TxScdcAction</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, gsv2k11.o(i.Gsv2k11TxScdcAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Gsv2k11TxScdcAction &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetStatus
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetSinkHdcpCapability
</UL>

<P><STRONG><a name="[177]"></a>Gsv2k11UpdateRxCdrBandWidth</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, gsv2k11.o(i.Gsv2k11UpdateRxCdrBandWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Gsv2k11UpdateRxCdrBandWidth &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cReadField8
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11RxManualEQUpdate
</UL>

<P><STRONG><a name="[165]"></a>Gsv2k11_TxSendAVInfoFrame</STRONG> (Thumb, 1196 bytes, Stack size 80 bytes, gsv2k11.o(i.Gsv2k11_TxSendAVInfoFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = Gsv2k11_TxSendAVInfoFrame &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvMemcpy
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetVideoTiming
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxEnableInfoFrames
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWrMultiField
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11_TxSetManualPixelRepeat
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11_TxSetCSC
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11FindHdmiRxFront
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetPacketContent
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetStatus
</UL>

<P><STRONG><a name="[16b]"></a>Gsv2k11_TxSetAudChStatSampFreq</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, gsv2k11.o(i.Gsv2k11_TxSetAudChStatSampFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Gsv2k11_TxSetAudChStatSampFreq &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookupValue8
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetPacketContent
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetAudioPackets
</UL>

<P><STRONG><a name="[16a]"></a>Gsv2k11_TxSetAudioInterface</STRONG> (Thumb, 434 bytes, Stack size 56 bytes, gsv2k11.o(i.Gsv2k11_TxSetAudioInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Gsv2k11_TxSetAudioInterface &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField32
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetAudioPackets
</UL>

<P><STRONG><a name="[178]"></a>Gsv2k11_TxSetCSC</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, gsv2k11.o(i.Gsv2k11_TxSetCSC))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Gsv2k11_TxSetCSC &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWrMultiField
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11ColorCsMapping
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11_TxSendAVInfoFrame
</UL>

<P><STRONG><a name="[179]"></a>Gsv2k11_TxSetManualPixelRepeat</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, gsv2k11.o(i.Gsv2k11_TxSetManualPixelRepeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Gsv2k11_TxSetManualPixelRepeat &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalI2cWriteField8
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11_TxSendAVInfoFrame
</UL>

<P><STRONG><a name="[38]"></a>GsvMain_thread_entry</STRONG> (Thumb, 816 bytes, Stack size 32 bytes, av_main.o(i.GsvMain_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = GsvMain_thread_entry &rArr; AvApiUpdate &rArr; AvFsmFunPlugTxFsm &rArr; KfunCecUpdateFromEdid &rArr; AvHandleEvent &rArr; AvEdidPortManage &rArr; KfunTxReadEdid &rArr; AvUapiTxReadEdid &rArr; AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiHookBspFunctions
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvKapiHookUserFunctions
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiUpdate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiPortStart
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiInitDevice
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiAddPort
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiAddDevice
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResolutionSwitch
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicLedOut
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiConnectPort
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvPortConnectUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[19e]"></a>I2CDelay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp.o(i.I2CDelay))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSetAck
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cWrite
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cStop
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cStart
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cSendByte
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cRestart
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cReadByte
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cRead
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManGetAck
</UL>

<P><STRONG><a name="[102]"></a>KfunCecUpdateFromEdid</STRONG> (Thumb, 270 bytes, Stack size 280 bytes, uapi_function_mapper.o(i.KfunCecUpdateFromEdid))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = KfunCecUpdateFromEdid &rArr; AvHandleEvent &rArr; AvEdidPortManage &rArr; KfunTxReadEdid &rArr; AvUapiTxReadEdid &rArr; AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindVideoRxFront
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindCecSPAFromEdid
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHandleEvent
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetHdmiModeSupport
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetFeatureSupport
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxReadEdid
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugTxFsm
</UL>

<P><STRONG><a name="[c3]"></a>KfunCheckLogicAudioRx</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kernel_status_update.o(i.KfunCheckLogicAudioRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = KfunCheckLogicAudioRx &rArr; AvUapiCheckLogicAudioRx &rArr; AvUapiTxSetPacketContent &rArr; Gsv2k11_TxSendAVInfoFrame &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckLogicAudioRx
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiUpdate
</UL>

<P><STRONG><a name="[c8]"></a>KfunCheckLogicAudioTx</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kernel_status_update.o(i.KfunCheckLogicAudioTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = KfunCheckLogicAudioTx &rArr; AvUapiCheckLogicAudioTx &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckLogicAudioTx
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiUpdate
</UL>

<P><STRONG><a name="[c1]"></a>KfunCheckLogicVideoRx</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, kernel_status_update.o(i.KfunCheckLogicVideoRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = KfunCheckLogicVideoRx &rArr; AvUapiCheckLogicVideoRx &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckLogicVideoRx
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiUpdate
</UL>

<P><STRONG><a name="[c7]"></a>KfunCheckLogicVideoTx</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, kernel_status_update.o(i.KfunCheckLogicVideoTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = KfunCheckLogicVideoTx &rArr; AvUapiCheckLogicVideoTx &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckLogicVideoTx
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiUpdate
</UL>

<P><STRONG><a name="[b9]"></a>KfunCheckPrState</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, kernel_status_update.o(i.KfunCheckPrState))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = KfunCheckPrState &rArr; AvUapiRxGetStatus &rArr; AvUapiRxGetVideoLock &rArr; Gsv2k11RxManualEQUpdate &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiUpdate
</UL>

<P><STRONG><a name="[c4]"></a>KfunCheckPtState</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, kernel_status_update.o(i.KfunCheckPtState))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = KfunCheckPtState &rArr; AvHandleEvent &rArr; AvEdidPortManage &rArr; KfunTxReadEdid &rArr; AvUapiTxReadEdid &rArr; AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHandleEvent
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetStatus
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetHdcpStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiUpdate
</UL>

<P><STRONG><a name="[bc]"></a>KfunCheckRxState</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, kernel_status_update.o(i.KfunCheckRxState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KfunCheckRxState &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunPollingRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiUpdate
</UL>

<P><STRONG><a name="[ca]"></a>KfunCheckVideoColor</STRONG> (Thumb, 600 bytes, Stack size 40 bytes, kernel_status_update.o(i.KfunCheckVideoColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = KfunCheckVideoColor &rArr; AvUapiCheckVideoColor &rArr; Gsv2k11CpCscManage &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindVideoNextTxEnd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckVideoColor
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiUpdate
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckVspPortContent
</UL>

<P><STRONG><a name="[cb]"></a>KfunCheckVideoGen</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, kernel_status_update.o(i.KfunCheckVideoGen))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = KfunCheckVideoGen &rArr; AvUapiCheckVideoGen &rArr; Gsv2k11ToggleDpllFreq &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckVideoGen
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiUpdate
</UL>

<P><STRONG><a name="[c9]"></a>KfunCheckVideoScaler</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, kernel_status_update.o(i.KfunCheckVideoScaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = KfunCheckVideoScaler &rArr; AvUapiCheckVideoScaler &rArr; Gsv2k11CpCscManage &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckVideoScaler
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiUpdate
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckVspPortContent
</UL>

<P><STRONG><a name="[182]"></a>KfunCheckVspPortContent</STRONG> (Thumb, 456 bytes, Stack size 40 bytes, uapi_function_mapper.o(i.KfunCheckVspPortContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = KfunCheckVspPortContent &rArr; KfunCheckVideoScaler &rArr; AvUapiCheckVideoScaler &rArr; Gsv2k11CpCscManage &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckVideoScaler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckVideoColor
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindVideoNextTxEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxfromRxPacketContent
</UL>

<P><STRONG><a name="[11e]"></a>KfunFindAudioNextTxEnd</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, uapi_function_mapper.o(i.KfunFindAudioNextTxEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = KfunFindAudioNextTxEnd &rArr;  KfunFindAudioNextTxEnd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindAudioNextTxEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxAudioManage
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunManageHpa
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxtoTxPacketContent
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindAudioNextTxEnd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckLogicAudioRx
</UL>

<P><STRONG><a name="[195]"></a>KfunFindAudioRxFront</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uapi_function_mapper.o(i.KfunFindAudioRxFront))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KfunFindAudioRxFront
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxAudioManage
</UL>

<P><STRONG><a name="[f0]"></a>KfunFindCecSPAFromEdid</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, uapi_function_mapper.o(i.KfunFindCecSPAFromEdid))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = KfunFindCecSPAFromEdid &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCecUpdateFromEdid
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidPortManage
</UL>

<P><STRONG><a name="[183]"></a>KfunFindVideoNextNode</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, uapi_function_mapper.o(i.KfunFindVideoNextNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = KfunFindVideoNextNode &rArr;  KfunFindVideoNextNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindVideoNextNode
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxReadInfo
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindVideoNextNode
</UL>

<P><STRONG><a name="[ee]"></a>KfunFindVideoNextTxEnd</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, uapi_function_mapper.o(i.KfunFindVideoNextTxEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = KfunFindVideoNextTxEnd &rArr;  KfunFindVideoNextTxEnd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindVideoNextTxEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxVideoManage
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxRoutingClearEndInfo
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunManageHpa
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunSimpleHdcpSync
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckVideoColor
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindVideoNextTxEnd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidPortManage
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetHdcpStatus
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxtoTxPacketContent
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckVspPortContent
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunHdcpDetectSink
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckVideoScaler
</UL>

<P><STRONG><a name="[112]"></a>KfunFindVideoRxFront</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uapi_function_mapper.o(i.KfunFindVideoRxFront))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KfunFindVideoRxFront
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxVideoManage
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunPtEnableTxCore
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCecUpdateFromEdid
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvPortConnectUpdate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHandleEvent
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetVideoTiming
</UL>

<P><STRONG><a name="[f1]"></a>KfunGenerateSourceSpa</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, uapi_function_mapper.o(i.KfunGenerateSourceSpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KfunGenerateSourceSpa
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidPortManage
</UL>

<P><STRONG><a name="[184]"></a>KfunHdcpDetectSink</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, uapi_function_mapper.o(i.KfunHdcpDetectSink))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = KfunHdcpDetectSink &rArr; AvUapiTxGetHdcpStatus &rArr; Gsv2k11SetTxHdcpVersion &rArr; Gsv2k11ToggleTxHpd &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindVideoNextTxEnd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetHdcpStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunSimpleHdcpManage
</UL>

<P><STRONG><a name="[185]"></a>KfunHdcpDetectSource</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, uapi_function_mapper.o(i.KfunHdcpDetectSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = KfunHdcpDetectSource &rArr; AvHandleEvent &rArr; AvEdidPortManage &rArr; KfunTxReadEdid &rArr; AvUapiTxReadEdid &rArr; AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHandleEvent
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetHdcpStatus
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxClearHdcpInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunSimpleHdcpManage
</UL>

<P><STRONG><a name="[186]"></a>KfunHdcpReset</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, uapi_function_mapper.o(i.KfunHdcpReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = KfunHdcpReset &rArr; AvUapiRxSetHdcpMode &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxSetHdcpMode
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiHdcp2p2Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxVarInit
</UL>

<P><STRONG><a name="[188]"></a>KfunHdcpVarInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uapi_function_mapper.o(i.KfunHdcpVarInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = KfunHdcpVarInit &rArr; AvHandleEvent &rArr; AvEdidPortManage &rArr; KfunTxReadEdid &rArr; AvUapiTxReadEdid &rArr; AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHandleEvent
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxSetHdcpEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxVarInit
</UL>

<P><STRONG><a name="[f8]"></a>KfunManageHpa</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, uapi_function_mapper.o(i.KfunManageHpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = KfunManageHpa &rArr; KfunPrHpdUp &rArr; AvUapiRxSetHpdUp &rArr; Gsv2k11EnableRxHpa &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunPrHpdUp
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunPrHpdDown
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindVideoNextTxEnd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindAudioNextTxEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugRxFsm
</UL>

<P><STRONG><a name="[181]"></a>KfunPollingRxStatus</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uapi_function_mapper.o(i.KfunPollingRxStatus))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckRxState
</UL>

<P><STRONG><a name="[f7]"></a>KfunPrHpdDown</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uapi_function_mapper.o(i.KfunPrHpdDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = KfunPrHpdDown &rArr; AvUapiRxSetHpdDown &rArr; Gsv2k11DisableRxHpa &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxSetHpdDown
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunManageHpa
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugRxFsm
</UL>

<P><STRONG><a name="[18a]"></a>KfunPrHpdUp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uapi_function_mapper.o(i.KfunPrHpdUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = KfunPrHpdUp &rArr; AvUapiRxSetHpdUp &rArr; Gsv2k11EnableRxHpa &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxSetHpdUp
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunManageHpa
</UL>

<P><STRONG><a name="[f6]"></a>KfunPrResetPort</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uapi_function_mapper.o(i.KfunPrResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = KfunPrResetPort &rArr; AvUapiResetPort &rArr; AvUapiTxDisableCore &rArr; Gsv2k11SetTxHdcpVersion &rArr; Gsv2k11ToggleTxHpd &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugRxFsm
</UL>

<P><STRONG><a name="[f5]"></a>KfunPrVarInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, uapi_function_mapper.o(i.KfunPrVarInit))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugRxFsm
</UL>

<P><STRONG><a name="[fb]"></a>KfunPrepareEdid</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uapi_function_mapper.o(i.KfunPrepareEdid))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = KfunPrepareEdid &rArr; AvHandleEvent &rArr; AvEdidPortManage &rArr; KfunTxReadEdid &rArr; AvUapiTxReadEdid &rArr; AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHandleEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugRxFsm
</UL>

<P><STRONG><a name="[106]"></a>KfunPtAntiDither</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uapi_function_mapper.o(i.KfunPtAntiDither))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugTxFsm
</UL>

<P><STRONG><a name="[105]"></a>KfunPtEnableTxCore</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, uapi_function_mapper.o(i.KfunPtEnableTxCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = KfunPtEnableTxCore &rArr; AvUapiTxSetVideoTiming &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindVideoRxFront
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetVideoTiming
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxEnableCore
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugTxFsm
</UL>

<P><STRONG><a name="[f3]"></a>KfunPtPortInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uapi_function_mapper.o(i.KfunPtPortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KfunPtPortInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxPortInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmEnterFunPlugTxFsm
</UL>

<P><STRONG><a name="[fe]"></a>KfunPtResetPort</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uapi_function_mapper.o(i.KfunPtResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = KfunPtResetPort &rArr; AvUapiResetPort &rArr; AvUapiTxDisableCore &rArr; Gsv2k11SetTxHdcpVersion &rArr; Gsv2k11ToggleTxHpd &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugTxFsm
</UL>

<P><STRONG><a name="[fd]"></a>KfunPtVarInit</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, uapi_function_mapper.o(i.KfunPtVarInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = KfunPtVarInit &rArr; AvHandleEvent &rArr; AvEdidPortManage &rArr; KfunTxReadEdid &rArr; AvUapiTxReadEdid &rArr; AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHandleEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugTxFsm
</UL>

<P><STRONG><a name="[110]"></a>KfunRxAudioManage</STRONG> (Thumb, 468 bytes, Stack size 88 bytes, uapi_function_mapper.o(i.KfunRxAudioManage))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = KfunRxAudioManage &rArr; KfunRxtoTxPacketContent &rArr; KfunTxfromRxPacketContent &rArr; AvUapiTxSetPacketContent &rArr; Gsv2k11_TxSendAVInfoFrame &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetAudNValue
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxSetAudioInternalMute
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetPacketType
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetHdmiAcrInfo
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetAudioPacketStatus
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetAudioInternalMute
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxClearAudioInterrupt
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxAudioManage
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxtoTxPacketContent
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindAudioNextTxEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunReceiverFsm
</UL>

<P><STRONG><a name="[10d]"></a>KfunRxClearFlags</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uapi_function_mapper.o(i.KfunRxClearFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = KfunRxClearFlags &rArr; AvUapiRxClearFlags &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxClearFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunReceiverFsm
</UL>

<P><STRONG><a name="[10e]"></a>KfunRxDisableFrun</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uapi_function_mapper.o(i.KfunRxDisableFrun))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KfunRxDisableFrun
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxEnableFreeRun
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunReceiverFsm
</UL>

<P><STRONG><a name="[10c]"></a>KfunRxEnableFrun</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uapi_function_mapper.o(i.KfunRxEnableFrun))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KfunRxEnableFrun
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxEnableFreeRun
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunReceiverFsm
</UL>

<P><STRONG><a name="[f4]"></a>KfunRxInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uapi_function_mapper.o(i.KfunRxInit))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmEnterFunReceiverFsm
</UL>

<P><STRONG><a name="[fc]"></a>KfunRxReadInfo</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, uapi_function_mapper.o(i.KfunRxReadInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = KfunRxReadInfo &rArr; AvUapiRxGetVideoTiming &rArr; AvHalI2cReadField32
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvMemcpy
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetVideoTiming
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxReadInfo
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetVideoTiming
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetHdmiDeepColor
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxSetColorDepth
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindVideoNextNode
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugRxFsm
</UL>

<P><STRONG><a name="[f9]"></a>KfunRxRoutingClearEndInfo</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uapi_function_mapper.o(i.KfunRxRoutingClearEndInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = KfunRxRoutingClearEndInfo &rArr; KfunFindVideoNextTxEnd &rArr;  KfunFindVideoNextTxEnd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindVideoNextTxEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugRxFsm
</UL>

<P><STRONG><a name="[10b]"></a>KfunRxVarInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, uapi_function_mapper.o(i.KfunRxVarInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = KfunRxVarInit &rArr; KfunHdcpVarInit &rArr; AvHandleEvent &rArr; AvEdidPortManage &rArr; KfunTxReadEdid &rArr; AvUapiTxReadEdid &rArr; AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunHdcpVarInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunHdcpReset
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvMemset
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxPortInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunReceiverFsm
</UL>

<P><STRONG><a name="[10f]"></a>KfunRxVideoManage</STRONG> (Thumb, 912 bytes, Stack size 88 bytes, uapi_function_mapper.o(i.KfunRxVideoManage))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = KfunRxVideoManage &rArr; KfunRxtoTxPacketContent &rArr; KfunTxfromRxPacketContent &rArr; AvUapiTxSetPacketContent &rArr; Gsv2k11_TxSendAVInfoFrame &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindVideoNextTxEnd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetPacketContent
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetHdmiModeSupport
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetHdmiDeepColor
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetAvMute
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxVideoManage
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetVideoTiming
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetVideoPacketStatus
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetHdmiModeSupport
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetHdmiDeepColor
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetAvMute
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxClearVideoInterrupt
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxSetColorDepth
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxtoTxPacketContent
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunReceiverFsm
</UL>

<P><STRONG><a name="[f2]"></a>KfunRxWriteEdid</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, uapi_function_mapper.o(i.KfunRxWriteEdid))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = KfunRxWriteEdid &rArr; AvUapiRxWriteEdid &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxWriteEdid
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxSetSpa
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxEnableInternalEdid
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidPortManage
</UL>

<P><STRONG><a name="[18c]"></a>KfunRxtoTxPacketContent</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, uapi_function_mapper.o(i.KfunRxtoTxPacketContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = KfunRxtoTxPacketContent &rArr; KfunTxfromRxPacketContent &rArr; AvUapiTxSetPacketContent &rArr; Gsv2k11_TxSendAVInfoFrame &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindVideoNextTxEnd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetPacketContent
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunUpdatePortFromPacket
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxfromRxPacketContent
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindAudioNextTxEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxVideoManage
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxAudioManage
</UL>

<P><STRONG><a name="[bf]"></a>KfunSimpleHdcpManage</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, kernel_status_update.o(i.KfunSimpleHdcpManage))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = KfunSimpleHdcpManage &rArr; KfunHdcpDetectSource &rArr; AvHandleEvent &rArr; AvEdidPortManage &rArr; KfunTxReadEdid &rArr; AvUapiTxReadEdid &rArr; AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunSimpleHdcpSync
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunHdcpDetectSource
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunHdcpDetectSink
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiUpdate
</UL>

<P><STRONG><a name="[c2]"></a>KfunSimpleHdcpSync</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, uapi_function_mapper.o(i.KfunSimpleHdcpSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = KfunSimpleHdcpSync &rArr; AvUapiTxEncryptSink &rArr; Gsv2k11SetTxHdcpVersion &rArr; Gsv2k11ToggleTxHpd &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindVideoNextTxEnd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetBlackMute
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxEncryptSink
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxDecryptSink
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunSimpleHdcpManage
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiUpdate
</UL>

<P><STRONG><a name="[fa]"></a>KfunStdiReadStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uapi_function_mapper.o(i.KfunStdiReadStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KfunStdiReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxReadStdi
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugRxFsm
</UL>

<P><STRONG><a name="[108]"></a>KfunTxAudioManage</STRONG> (Thumb, 212 bytes, Stack size 80 bytes, uapi_function_mapper.o(i.KfunTxAudioManage))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = KfunTxAudioManage &rArr; KfunTxfromRxPacketContent &rArr; AvUapiTxSetPacketContent &rArr; Gsv2k11_TxSendAVInfoFrame &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvMemcpy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetAudioPackets
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxAudioManage
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxfromRxPacketContent
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindAudioRxFront
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugTxFsm
</UL>

<P><STRONG><a name="[103]"></a>KfunTxClearMuteAv</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uapi_function_mapper.o(i.KfunTxClearMuteAv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = KfunTxClearMuteAv &rArr; AvUapiTxSetAvMute &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetBlackMute
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetAvMute
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugTxFsm
</UL>

<P><STRONG><a name="[100]"></a>KfunTxEdidError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uapi_function_mapper.o(i.KfunTxEdidError))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = KfunTxEdidError &rArr; AvHandleEvent &rArr; AvEdidPortManage &rArr; KfunTxReadEdid &rArr; AvUapiTxReadEdid &rArr; AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHandleEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugTxFsm
</UL>

<P><STRONG><a name="[104]"></a>KfunTxHdcpManage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uapi_function_mapper.o(i.KfunTxHdcpManage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = KfunTxHdcpManage &rArr; AvUapiTxClearBksvReady &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxHdcp2p2Manage
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxClearBksvReady
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugTxFsm
</UL>

<P><STRONG><a name="[e8]"></a>KfunTxReadEdid</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uapi_function_mapper.o(i.KfunTxReadEdid))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = KfunTxReadEdid &rArr; AvUapiTxReadEdid &rArr; AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxReadEdid
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidPortManage
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvEdidPortAnalysis
</UL>

<P><STRONG><a name="[18f]"></a>KfunTxSetColorDepth</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, uapi_function_mapper.o(i.KfunTxSetColorDepth))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxVideoManage
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxVideoManage
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxReadInfo
</UL>

<P><STRONG><a name="[113]"></a>KfunTxSetHdmiModeSupport</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uapi_function_mapper.o(i.KfunTxSetHdmiModeSupport))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = KfunTxSetHdmiModeSupport &rArr; AvUapiTxSetHdmiModeSupport &rArr; AvHalI2cWriteField8
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetHdmiModeSupport
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHandleEvent
</UL>

<P><STRONG><a name="[ff]"></a>KfunTxSetMuteAv</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uapi_function_mapper.o(i.KfunTxSetMuteAv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = KfunTxSetMuteAv &rArr; AvUapiTxSetAvMute &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetBlackMute
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetAvMute
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugTxFsm
</UL>

<P><STRONG><a name="[101]"></a>KfunTxSinkLost</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uapi_function_mapper.o(i.KfunTxSinkLost))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = KfunTxSinkLost &rArr; AvHandleEvent &rArr; AvEdidPortManage &rArr; KfunTxReadEdid &rArr; AvUapiTxReadEdid &rArr; AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHandleEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugTxFsm
</UL>

<P><STRONG><a name="[109]"></a>KfunTxUnlockProtection</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uapi_function_mapper.o(i.KfunTxUnlockProtection))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = KfunTxUnlockProtection &rArr; AvUapiTxDisableCore &rArr; Gsv2k11SetTxHdcpVersion &rArr; Gsv2k11ToggleTxHpd &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxEnableCore
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxDisableCore
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugTxFsm
</UL>

<P><STRONG><a name="[10a]"></a>KfunTxUseDefaultEdid</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uapi_function_mapper.o(i.KfunTxUseDefaultEdid))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = KfunTxUseDefaultEdid &rArr; AvHandleEvent &rArr; AvEdidPortManage &rArr; KfunTxReadEdid &rArr; AvUapiTxReadEdid &rArr; AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHandleEvent
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetHdmiModeSupport
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugTxFsm
</UL>

<P><STRONG><a name="[107]"></a>KfunTxVideoManage</STRONG> (Thumb, 788 bytes, Stack size 88 bytes, uapi_function_mapper.o(i.KfunTxVideoManage))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = KfunTxVideoManage &rArr; KfunTxfromRxPacketContent &rArr; AvUapiTxSetPacketContent &rArr; Gsv2k11_TxSendAVInfoFrame &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunFindVideoRxFront
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxVideoManage
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetPacketContent
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetHdmiDeepColor
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetHdmiDeepColor
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxfromRxPacketContent
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxSetColorDepth
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugTxFsm
</UL>

<P><STRONG><a name="[193]"></a>KfunTxfromRxPacketContent</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, uapi_function_mapper.o(i.KfunTxfromRxPacketContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = KfunTxfromRxPacketContent &rArr; AvUapiTxSetPacketContent &rArr; Gsv2k11_TxSendAVInfoFrame &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetPacketContent
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxEnableInfoFrames
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetPacketContent
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunUpdatePortFromPacket
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckVspPortContent
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxVideoManage
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxAudioManage
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxtoTxPacketContent
</UL>

<P><STRONG><a name="[192]"></a>KfunUpdatePortFromPacket</STRONG> (Thumb, 990 bytes, Stack size 56 bytes, uapi_function_mapper.o(i.KfunUpdatePortFromPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = KfunUpdatePortFromPacket &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunTxfromRxPacketContent
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunRxtoTxPacketContent
</UL>

<P><STRONG><a name="[33]"></a>ListenToIrdaCommand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, av_irda_cmd.o(i.ListenToIrdaCommand))
<BR>[Address Reference Count : 1]<UL><LI> av_main.o(i.GsvMain_thread_entry)
</UL>
<P><STRONG><a name="[35]"></a>ListenToKeyCommand</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, av_key_cmd.o(i.ListenToKeyCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ListenToKeyCommand &rArr; ProcessKey &rArr; AvHalGetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> av_main.o(i.GsvMain_thread_entry)
</UL>
<P><STRONG><a name="[34]"></a>ListenToUartCommand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, av_uart_cmd.o(i.ListenToUartCommand))
<BR>[Address Reference Count : 1]<UL><LI> av_main.o(i.GsvMain_thread_entry)
</UL>
<P><STRONG><a name="[17e]"></a>LogicLedOut</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, av_key_cmd.o(i.LogicLedOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LogicLedOut
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsvMain_thread_entry
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
</UL>

<P><STRONG><a name="[17a]"></a>LookupValue8</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, hal.o(i.LookupValue8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LookupValue8
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsv2k11_TxSetAudChStatSampFreq
</UL>

<P><STRONG><a name="[1ac]"></a>ManDriveScl</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, bsp.o(i.ManDriveScl))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cStart
</UL>

<P><STRONG><a name="[1a5]"></a>ManDriveSda</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, bsp.o(i.ManDriveSda))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cStart
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cSendByte
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cReadByte
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManGetAck
</UL>

<P><STRONG><a name="[19d]"></a>ManGetAck</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, bsp.o(i.ManGetAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ManGetAck
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSdaLow
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSdaHigh
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSclLow
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSclHigh
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManReleaseSda
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManDriveSda
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDelay
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSdaValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cSendByte
</UL>

<P><STRONG><a name="[172]"></a>ManI2cRead</STRONG> (Thumb, 162 bytes, Stack size 44 bytes, bsp.o(i.ManI2cRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ManI2cRead &rArr; ManI2cSendByte &rArr; ManGetAck
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cStop
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cStart
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cSendByte
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cRestart
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cReadByte
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspI2cRead
</UL>

<P><STRONG><a name="[1a9]"></a>ManI2cReadByte</STRONG> (Thumb, 130 bytes, Stack size 28 bytes, bsp.o(i.ManI2cReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ManI2cReadByte &rArr; ManSetAck
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSetAck
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSclLow
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSclHigh
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManReleaseSda
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManDriveSda
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDelay
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSdaValue
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cRead
</UL>

<P><STRONG><a name="[1a8]"></a>ManI2cRestart</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, bsp.o(i.ManI2cRestart))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ManI2cRestart
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSdaLow
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSdaHigh
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSclLow
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSclHigh
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cRead
</UL>

<P><STRONG><a name="[1a7]"></a>ManI2cSendByte</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, bsp.o(i.ManI2cSendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ManI2cSendByte &rArr; ManGetAck
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSdaLow
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSdaHigh
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSclLow
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSclHigh
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManReleaseSda
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManGetAck
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManDriveSda
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cRead
</UL>

<P><STRONG><a name="[1a6]"></a>ManI2cStart</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, bsp.o(i.ManI2cStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ManI2cStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSdaLow
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSdaHigh
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSclLow
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSclHigh
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManDriveSda
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManDriveScl
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cRead
</UL>

<P><STRONG><a name="[1aa]"></a>ManI2cStop</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, bsp.o(i.ManI2cStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ManI2cStop
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSdaHigh
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSclHigh
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManReleaseSda
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManReleaseScl
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cRead
</UL>

<P><STRONG><a name="[173]"></a>ManI2cWrite</STRONG> (Thumb, 134 bytes, Stack size 44 bytes, bsp.o(i.ManI2cWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ManI2cWrite &rArr; ManI2cSendByte &rArr; ManGetAck
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cStop
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cStart
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cSendByte
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspI2cWrite
</UL>

<P><STRONG><a name="[1ad]"></a>ManReleaseScl</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, bsp.o(i.ManReleaseScl))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cStop
</UL>

<P><STRONG><a name="[1a0]"></a>ManReleaseSda</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, bsp.o(i.ManReleaseSda))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cStop
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cSendByte
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cReadByte
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManGetAck
</UL>

<P><STRONG><a name="[1a1]"></a>ManSclHigh</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, bsp.o(i.ManSclHigh))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSetAck
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cStop
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cStart
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cSendByte
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cRestart
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cReadByte
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManGetAck
</UL>

<P><STRONG><a name="[19f]"></a>ManSclLow</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, bsp.o(i.ManSclLow))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSetAck
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cStart
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cSendByte
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cRestart
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cReadByte
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManGetAck
</UL>

<P><STRONG><a name="[1a4]"></a>ManSdaHigh</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, bsp.o(i.ManSdaHigh))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSetAck
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cStop
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cStart
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cSendByte
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cRestart
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManGetAck
</UL>

<P><STRONG><a name="[1a3]"></a>ManSdaLow</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, bsp.o(i.ManSdaLow))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSetAck
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cStart
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cSendByte
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cRestart
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManGetAck
</UL>

<P><STRONG><a name="[1ab]"></a>ManSetAck</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, bsp.o(i.ManSetAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ManSetAck
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSdaLow
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSdaHigh
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSclLow
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManSclHigh
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManI2cReadByte
</UL>

<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ft32f0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1dd]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, ft32f0xx_misc.o(i.NVIC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpga2mcu_uart_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_uart_init
</UL>

<P><STRONG><a name="[c0]"></a>PrintHdcpFsm</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, kapi_debug_info.o(i.PrintHdcpFsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = PrintHdcpFsm &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiUpdate
</UL>

<P><STRONG><a name="[bb]"></a>PrintPlugRxFsm</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, kapi_debug_info.o(i.PrintPlugRxFsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = PrintPlugRxFsm &rArr; AvHandleEvent &rArr; AvEdidPortManage &rArr; KfunTxReadEdid &rArr; AvUapiTxReadEdid &rArr; AvUapiTxGetSinkHdcpCapability &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHandleEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiUpdate
</UL>

<P><STRONG><a name="[c6]"></a>PrintPlugTxFsm</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, kapi_debug_info.o(i.PrintPlugTxFsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = PrintPlugTxFsm &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiUpdate
</UL>

<P><STRONG><a name="[be]"></a>PrintReceiverFsm</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, kapi_debug_info.o(i.PrintReceiverFsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = PrintReceiverFsm &rArr; AvUapiOuputDbgMsg &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiOuputDbgMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiUpdate
</UL>

<P><STRONG><a name="[197]"></a>ProcessKey</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, av_key_cmd.o(i.ProcessKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ProcessKey &rArr; AvHalGetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHalGetKey
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicLedOut
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListenToKeyCommand
</UL>

<P><STRONG><a name="[19a]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ft32f0xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eSoft_I2C_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpga2mcu_uart_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_uart_init
</UL>

<P><STRONG><a name="[1db]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ft32f0xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpga2mcu_uart_init
</UL>

<P><STRONG><a name="[225]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ft32f0xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_uart_init
</UL>

<P><STRONG><a name="[1af]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, ft32f0xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1e1]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ft32f0xx_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[114]"></a>RxInLedOut</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, av_key_cmd.o(i.RxInLedOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RxInLedOut
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHandleEvent
</UL>

<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ft32f0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1d0]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ft32f0xx_misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, board.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SysTick_Handler &rArr; rt_os_tick_callback &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_os_tick_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, system_ft32f0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo48
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(.text)
</UL>
<P><STRONG><a name="[111]"></a>TxOutLedOut</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, av_key_cmd.o(i.TxOutLedOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TxOutLedOut
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHandleEvent
</UL>

<P><STRONG><a name="[174]"></a>UART_Receive</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bsp.o(i.UART_Receive))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspUartGetByte
</UL>

<P><STRONG><a name="[175]"></a>UART_Transmit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, bsp.o(i.UART_Transmit))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspUartSendByte
</UL>

<P><STRONG><a name="[24]"></a>USART1_IRQHandler</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>USART2_IRQHandler</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, fpga2mcu_uart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART2_IRQHandler &rArr; rt_event_send &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1de]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ft32f0xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpga2mcu_uart_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_uart_init
</UL>

<P><STRONG><a name="[1b4]"></a>USART_GetITStatus</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ft32f0xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[1df]"></a>USART_ITConfig</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ft32f0xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpga2mcu_uart_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_uart_init
</UL>

<P><STRONG><a name="[1b9]"></a>USART_Init</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, ft32f0xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpga2mcu_uart_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_uart_init
</UL>

<P><STRONG><a name="[1b5]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ft32f0xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, btod.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[a9]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timer.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReceiverFsm
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPlugTxFsm
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPlugRxFsm
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHdcpFsm
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckRxState
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckPtState
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunCheckPrState
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugTxFsm
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvFsmFunPlugRxFsm
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiPortMemAllocate
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiInitFsm
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiUpdate
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvApiConnectPort
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvPortSetRouting
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvHandleEvent
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxSetPacketContent
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxEncryptSink
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiRxGetPacketContent
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfunUpdatePortFromPacket
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiTxGetHdcpStatus
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckVideoScaler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvUapiCheckLogicAudioRx
</UL>

<P><STRONG><a name="[94]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[20b]"></a>__rt_ffs</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, kservice.o(i.__rt_ffs))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[8d]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[7a]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1c5]"></a>aw2013_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, aw2013.o(i.aw2013_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = aw2013_init &rArr; delay_ms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eSoft_I2C_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eI2C_DeviceWriteOneByte
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eI2C_DeviceReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_thread_entry
</UL>

<P><STRONG><a name="[1ca]"></a>aw2013_process</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, aw2013.o(i.aw2013_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = aw2013_process &rArr; rt_event_recv &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eI2C_DeviceWrite
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_thread_entry
</UL>

<P><STRONG><a name="[1cf]"></a>delay_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1c9]"></a>delay_ms</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = delay_ms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw2013_init
</UL>

<P><STRONG><a name="[1d2]"></a>delay_us</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoft_I2C_Stop
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoft_I2C_Start
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoft_I2C_Send_Byte
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoft_I2C_NAck
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoft_I2C_Ack
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSoft_I2C_Wait_Ack
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSoft_I2C_Read_Byte
</UL>

<P><STRONG><a name="[1c8]"></a>eI2C_DeviceReadOneByte</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, soft_i2c.o(i.eI2C_DeviceReadOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = eI2C_DeviceReadOneByte &rArr; uSoft_I2C_Read_Byte &rArr; vSoft_I2C_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoft_I2C_Stop
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoft_I2C_Start
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoft_I2C_Send_Byte
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSoft_I2C_Wait_Ack
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSoft_I2C_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw2013_init
</UL>

<P><STRONG><a name="[1cd]"></a>eI2C_DeviceWrite</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, soft_i2c.o(i.eI2C_DeviceWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = eI2C_DeviceWrite &rArr; uSoft_I2C_Wait_Ack &rArr; vSoft_I2C_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoft_I2C_Stop
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoft_I2C_Start
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoft_I2C_Send_Byte
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSoft_I2C_Wait_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw2013_process
</UL>

<P><STRONG><a name="[1c7]"></a>eI2C_DeviceWriteOneByte</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, soft_i2c.o(i.eI2C_DeviceWriteOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eI2C_DeviceWriteOneByte &rArr; uSoft_I2C_Wait_Ack &rArr; vSoft_I2C_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoft_I2C_Stop
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoft_I2C_Start
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoft_I2C_Send_Byte
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSoft_I2C_Wait_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw2013_init
</UL>

<P><STRONG><a name="[1d8]"></a>eI2C_SetDeviceAddress</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, soft_i2c.o(i.eI2C_SetDeviceAddress))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eSoft_I2C_Init
</UL>

<P><STRONG><a name="[1c6]"></a>eSoft_I2C_Init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, soft_i2c.o(i.eSoft_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = eSoft_I2C_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eI2C_SetDeviceAddress
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw2013_init
</UL>

<P><STRONG><a name="[1d9]"></a>fpga2mcu_uart_init</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, fpga2mcu_uart.o(i.fpga2mcu_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = fpga2mcu_uart_init &rArr; rt_event_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1b7]"></a>get_uart_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fpga2mcu_uart.o(i.get_uart_data))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[1e0]"></a>$Super$$main</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = $Super$$main &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpga2mcu_uart_init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[3a]"></a>main_thread_entry</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, components.o(i.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[1e7]"></a>rt_application_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, components.o(i.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1f8]"></a>rt_components_board_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1e5]"></a>rt_components_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[1cc]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(i.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw2013_process
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_thread_entry
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>

<P><STRONG><a name="[1da]"></a>rt_event_create</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ipc.o(i.rt_event_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_event_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpga2mcu_uart_init
</UL>

<P><STRONG><a name="[1cb]"></a>rt_event_recv</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, ipc.o(i.rt_event_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rt_event_recv &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw2013_process
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResolutionSwitch
</UL>

<P><STRONG><a name="[1b8]"></a>rt_event_send</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, ipc.o(i.rt_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_event_send &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResolutionSwitch
</UL>

<P><STRONG><a name="[1ce]"></a>rt_exit_critical</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, scheduler.o(i.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw2013_process
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_thread_entry
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>

<P><STRONG><a name="[1f0]"></a>rt_free</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, mem.o(i.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[1fa]"></a>rt_heap_begin_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(i.rt_heap_begin_get))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1f9]"></a>rt_heap_end_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(i.rt_heap_end_get))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1f5]"></a>rt_hw_board_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, board.o(i.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_hw_board_init &rArr; rt_system_heap_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_uart_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_heap_end_get
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_heap_begin_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1fc]"></a>rt_hw_console_output</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, board.o(i.rt_hw_console_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[7b]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, cpuport.o(i.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_hw_hard_fault_exception &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[1bc]"></a>rt_hw_stack_init</STRONG> (Thumb, 58 bytes, Stack size 36 bytes, cpuport.o(i.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[1b3]"></a>rt_interrupt_enter</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_os_tick_callback
</UL>

<P><STRONG><a name="[1b6]"></a>rt_interrupt_leave</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_os_tick_callback
</UL>

<P><STRONG><a name="[1f2]"></a>rt_kprintf</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, kservice.o(i.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResolutionSwitch
</UL>

<P><STRONG><a name="[202]"></a>rt_malloc</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, mem.o(i.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[1bb]"></a>rt_memset</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, kservice.o(i.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[1e8]"></a>rt_object_allocate</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, object.o(i.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[206]"></a>rt_object_delete</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, object.o(i.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[208]"></a>rt_object_detach</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, object.o(i.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[203]"></a>rt_object_get_information</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, object.o(i.rt_object_get_information))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[209]"></a>rt_object_init</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, object.o(i.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[218]"></a>rt_object_is_systemobject</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, object.o(i.rt_object_is_systemobject))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1b2]"></a>rt_os_tick_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(i.rt_os_tick_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_os_tick_callback &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1ed]"></a>rt_schedule</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, scheduler.o(i.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
</UL>

<P><STRONG><a name="[20e]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[20f]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
</UL>

<P><STRONG><a name="[210]"></a>rt_sem_init</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[1f4]"></a>rt_sem_release</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[1f1]"></a>rt_sem_take</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[211]"></a>rt_show_version</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(i.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[204]"></a>rt_strncpy</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, kservice.o(i.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[1fb]"></a>rt_system_heap_init</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, mem.o(i.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_system_heap_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[212]"></a>rt_system_scheduler_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, scheduler.o(i.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[214]"></a>rt_system_scheduler_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler.o(i.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_system_scheduler_start
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[216]"></a>rt_system_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(i.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[227]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.rt_system_timer_thread_init))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1e3]"></a>rt_thread_create</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, thread.o(i.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[36]"></a>rt_thread_exit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, thread.o(i.rt_thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_exit &rArr; rt_timer_detach &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[21a]"></a>rt_thread_idle_excute</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, idle.o(i.rt_thread_idle_excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[21b]"></a>rt_thread_idle_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, idle.o(i.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[21c]"></a>rt_thread_init</STRONG> (Thumb, 44 bytes, Stack size 56 bytes, thread.o(i.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[180]"></a>rt_thread_mdelay</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, thread.o(i.rt_thread_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw2013_process
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsvMain_thread_entry
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_thread_entry
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1ef]"></a>rt_thread_resume</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, thread.o(i.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>

<P><STRONG><a name="[1d1]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(i.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[21e]"></a>rt_thread_sleep</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, thread.o(i.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[1e4]"></a>rt_thread_startup</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, thread.o(i.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_thread_startup &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[1fe]"></a>rt_thread_suspend</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, thread.o(i.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[37]"></a>rt_thread_timeout</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, thread.o(i.rt_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[221]"></a>rt_thread_yield</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, thread.o(i.rt_thread_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_yield &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[21d]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, clock.o(i.rt_tick_from_millisecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_tick_from_millisecond &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[171]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspGetMilliSecond
</UL>

<P><STRONG><a name="[20a]"></a>rt_tick_increase</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, clock.o(i.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_os_tick_callback
</UL>

<P><STRONG><a name="[222]"></a>rt_timer_check</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, timer.o(i.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[1eb]"></a>rt_timer_control</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, timer.o(i.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_control &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[217]"></a>rt_timer_detach</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timer.o(i.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_detach &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1bd]"></a>rt_timer_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, timer.o(i.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[1ec]"></a>rt_timer_start</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, timer.o(i.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[220]"></a>rt_timer_stop</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, timer.o(i.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[201]"></a>rt_vsnprintf</STRONG> (Thumb, 882 bytes, Stack size 80 bytes, kservice.o(i.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[a5]"></a>rtthread_startup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, components.o(i.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d6]"></a>uSoft_I2C_Read_Byte</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, soft_i2c.o(i.uSoft_I2C_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uSoft_I2C_Read_Byte &rArr; vSoft_I2C_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoft_I2C_NAck
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoft_I2C_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eI2C_DeviceReadOneByte
</UL>

<P><STRONG><a name="[1d5]"></a>uSoft_I2C_Wait_Ack</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, soft_i2c.o(i.uSoft_I2C_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uSoft_I2C_Wait_Ack &rArr; vSoft_I2C_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoft_I2C_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eI2C_DeviceWriteOneByte
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eI2C_DeviceWrite
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eI2C_DeviceReadOneByte
</UL>

<P><STRONG><a name="[17f]"></a>vResolutionSwitch</STRONG> (Thumb, 382 bytes, Stack size 24 bytes, av_main.o(i.vResolutionSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = vResolutionSwitch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsvMain_thread_entry
</UL>

<P><STRONG><a name="[229]"></a>vSoft_I2C_Ack</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, soft_i2c.o(i.vSoft_I2C_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vSoft_I2C_Ack &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSoft_I2C_Read_Byte
</UL>

<P><STRONG><a name="[228]"></a>vSoft_I2C_NAck</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, soft_i2c.o(i.vSoft_I2C_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vSoft_I2C_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSoft_I2C_Read_Byte
</UL>

<P><STRONG><a name="[1d4]"></a>vSoft_I2C_Send_Byte</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, soft_i2c.o(i.vSoft_I2C_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vSoft_I2C_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eI2C_DeviceWriteOneByte
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eI2C_DeviceWrite
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eI2C_DeviceReadOneByte
</UL>

<P><STRONG><a name="[1d3]"></a>vSoft_I2C_Start</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, soft_i2c.o(i.vSoft_I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vSoft_I2C_Start &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eI2C_DeviceWriteOneByte
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eI2C_DeviceWrite
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eI2C_DeviceReadOneByte
</UL>

<P><STRONG><a name="[1d7]"></a>vSoft_I2C_Stop</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, soft_i2c.o(i.vSoft_I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vSoft_I2C_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSoft_I2C_Wait_Ack
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eI2C_DeviceWriteOneByte
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eI2C_DeviceWrite
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eI2C_DeviceReadOneByte
</UL>

<P><STRONG><a name="[6f]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[2b]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>_printf_fp_dec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[50]"></a>_printf_fp_hex</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[199]"></a>MX_GPIO_Init</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MX_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[39]"></a>test_thread_entry</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.test_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = test_thread_entry &rArr; aw2013_process &rArr; rt_event_recv &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw2013_process
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw2013_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1b0]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_ft32f0xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo48
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo48
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1b1]"></a>SetSysClockTo48</STRONG> (Thumb, 198 bytes, Stack size 12 bytes, system_ft32f0xx.o(i.SetSysClockTo48))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo48
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[40]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[3f]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[41]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[3e]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[3b]"></a>rt_thread_idle_entry</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, idle.o(i.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(i.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[1fd]"></a>rt_ipc_list_resume</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ipc.o(i.rt_ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[1ea]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ipc.o(i.rt_ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[1e9]"></a>rt_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipc.o(i.rt_ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>

<P><STRONG><a name="[200]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>

<P><STRONG><a name="[1ff]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[1ee]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[1e6]"></a>print_number</STRONG> (Thumb, 396 bytes, Stack size 80 bytes, kservice.o(i.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[226]"></a>skip_atoi</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, kservice.o(i.skip_atoi))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[1f3]"></a>plug_holes</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[205]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[207]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[213]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[1ba]"></a>_rt_thread_init</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, thread.o(i._rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[1c2]"></a>_thread_cleanup_execute</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, thread.o(i._thread_cleanup_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _thread_cleanup_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[219]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[21f]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
</UL>

<P><STRONG><a name="[1be]"></a>_rt_timer_init</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, timer.o(i._rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[1c0]"></a>_rt_timer_remove</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer.o(i._rt_timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[1bf]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[223]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[224]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[1c1]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[1f6]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, board.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1f7]"></a>rt_uart_init</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, board.o(i.rt_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[2a]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>_fp_digits</STRONG> (Thumb, 412 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[9e]"></a>btod_internal_mul</STRONG> (Thumb, 492 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[a1]"></a>btod_internal_div</STRONG> (Thumb, 520 bytes, Stack size 64 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[a3]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[98]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[9a]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
